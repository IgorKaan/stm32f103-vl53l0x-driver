
stm32f103-vl53l0x-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004adc  08004adc  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08004adc  08004adc  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004adc  08004adc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000054  08004b38  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20000164  08004b38  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a20  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001825  00000000  00000000  00029a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000131ed  00000000  00000000  0002c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000736e  00000000  00000000  0003f6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069eaf  00000000  00000000  00046a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b08ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002860  00000000  00000000  000b0948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a98 	.word	0x08004a98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	08004a98 	.word	0x08004a98

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_fmul>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d06f      	beq.n	80006d0 <__aeabi_fmul+0xf8>
 80005f0:	441a      	add	r2, r3
 80005f2:	ea80 0c01 	eor.w	ip, r0, r1
 80005f6:	0240      	lsls	r0, r0, #9
 80005f8:	bf18      	it	ne
 80005fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005fe:	d01e      	beq.n	800063e <__aeabi_fmul+0x66>
 8000600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000604:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000608:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800060c:	fba0 3101 	umull	r3, r1, r0, r1
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000614:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000618:	bf3e      	ittt	cc
 800061a:	0049      	lslcc	r1, r1, #1
 800061c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000620:	005b      	lslcc	r3, r3, #1
 8000622:	ea40 0001 	orr.w	r0, r0, r1
 8000626:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800062a:	2afd      	cmp	r2, #253	; 0xfd
 800062c:	d81d      	bhi.n	800066a <__aeabi_fmul+0x92>
 800062e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000632:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000636:	bf08      	it	eq
 8000638:	f020 0001 	biceq.w	r0, r0, #1
 800063c:	4770      	bx	lr
 800063e:	f090 0f00 	teq	r0, #0
 8000642:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	0249      	lsleq	r1, r1, #9
 800064a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800064e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000652:	3a7f      	subs	r2, #127	; 0x7f
 8000654:	bfc2      	ittt	gt
 8000656:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800065a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800065e:	4770      	bxgt	lr
 8000660:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	3a01      	subs	r2, #1
 800066a:	dc5d      	bgt.n	8000728 <__aeabi_fmul+0x150>
 800066c:	f112 0f19 	cmn.w	r2, #25
 8000670:	bfdc      	itt	le
 8000672:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000676:	4770      	bxle	lr
 8000678:	f1c2 0200 	rsb	r2, r2, #0
 800067c:	0041      	lsls	r1, r0, #1
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	f1c2 0220 	rsb	r2, r2, #32
 8000686:	fa00 fc02 	lsl.w	ip, r0, r2
 800068a:	ea5f 0031 	movs.w	r0, r1, rrx
 800068e:	f140 0000 	adc.w	r0, r0, #0
 8000692:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000696:	bf08      	it	eq
 8000698:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800069c:	4770      	bx	lr
 800069e:	f092 0f00 	teq	r2, #0
 80006a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006a6:	bf02      	ittt	eq
 80006a8:	0040      	lsleq	r0, r0, #1
 80006aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ae:	3a01      	subeq	r2, #1
 80006b0:	d0f9      	beq.n	80006a6 <__aeabi_fmul+0xce>
 80006b2:	ea40 000c 	orr.w	r0, r0, ip
 80006b6:	f093 0f00 	teq	r3, #0
 80006ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006be:	bf02      	ittt	eq
 80006c0:	0049      	lsleq	r1, r1, #1
 80006c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006c6:	3b01      	subeq	r3, #1
 80006c8:	d0f9      	beq.n	80006be <__aeabi_fmul+0xe6>
 80006ca:	ea41 010c 	orr.w	r1, r1, ip
 80006ce:	e78f      	b.n	80005f0 <__aeabi_fmul+0x18>
 80006d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006d4:	ea92 0f0c 	teq	r2, ip
 80006d8:	bf18      	it	ne
 80006da:	ea93 0f0c 	teqne	r3, ip
 80006de:	d00a      	beq.n	80006f6 <__aeabi_fmul+0x11e>
 80006e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006e4:	bf18      	it	ne
 80006e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ea:	d1d8      	bne.n	800069e <__aeabi_fmul+0xc6>
 80006ec:	ea80 0001 	eor.w	r0, r0, r1
 80006f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006f4:	4770      	bx	lr
 80006f6:	f090 0f00 	teq	r0, #0
 80006fa:	bf17      	itett	ne
 80006fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000700:	4608      	moveq	r0, r1
 8000702:	f091 0f00 	teqne	r1, #0
 8000706:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800070a:	d014      	beq.n	8000736 <__aeabi_fmul+0x15e>
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d101      	bne.n	8000716 <__aeabi_fmul+0x13e>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	d10f      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000716:	ea93 0f0c 	teq	r3, ip
 800071a:	d103      	bne.n	8000724 <__aeabi_fmul+0x14c>
 800071c:	024b      	lsls	r3, r1, #9
 800071e:	bf18      	it	ne
 8000720:	4608      	movne	r0, r1
 8000722:	d108      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000724:	ea80 0001 	eor.w	r0, r0, r1
 8000728:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800072c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000734:	4770      	bx	lr
 8000736:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800073a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800073e:	4770      	bx	lr

08000740 <__aeabi_fdiv>:
 8000740:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000744:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000748:	bf1e      	ittt	ne
 800074a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800074e:	ea92 0f0c 	teqne	r2, ip
 8000752:	ea93 0f0c 	teqne	r3, ip
 8000756:	d069      	beq.n	800082c <__aeabi_fdiv+0xec>
 8000758:	eba2 0203 	sub.w	r2, r2, r3
 800075c:	ea80 0c01 	eor.w	ip, r0, r1
 8000760:	0249      	lsls	r1, r1, #9
 8000762:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000766:	d037      	beq.n	80007d8 <__aeabi_fdiv+0x98>
 8000768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800076c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000770:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000774:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000778:	428b      	cmp	r3, r1
 800077a:	bf38      	it	cc
 800077c:	005b      	lslcc	r3, r3, #1
 800077e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000782:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000786:	428b      	cmp	r3, r1
 8000788:	bf24      	itt	cs
 800078a:	1a5b      	subcs	r3, r3, r1
 800078c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000790:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000794:	bf24      	itt	cs
 8000796:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800079a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800079e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80007a2:	bf24      	itt	cs
 80007a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80007a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80007b0:	bf24      	itt	cs
 80007b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80007b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	bf18      	it	ne
 80007be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80007c2:	d1e0      	bne.n	8000786 <__aeabi_fdiv+0x46>
 80007c4:	2afd      	cmp	r2, #253	; 0xfd
 80007c6:	f63f af50 	bhi.w	800066a <__aeabi_fmul+0x92>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007d0:	bf08      	it	eq
 80007d2:	f020 0001 	biceq.w	r0, r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e0:	327f      	adds	r2, #127	; 0x7f
 80007e2:	bfc2      	ittt	gt
 80007e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007ec:	4770      	bxgt	lr
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	3a01      	subs	r2, #1
 80007f8:	e737      	b.n	800066a <__aeabi_fmul+0x92>
 80007fa:	f092 0f00 	teq	r2, #0
 80007fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000802:	bf02      	ittt	eq
 8000804:	0040      	lsleq	r0, r0, #1
 8000806:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800080a:	3a01      	subeq	r2, #1
 800080c:	d0f9      	beq.n	8000802 <__aeabi_fdiv+0xc2>
 800080e:	ea40 000c 	orr.w	r0, r0, ip
 8000812:	f093 0f00 	teq	r3, #0
 8000816:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800081a:	bf02      	ittt	eq
 800081c:	0049      	lsleq	r1, r1, #1
 800081e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000822:	3b01      	subeq	r3, #1
 8000824:	d0f9      	beq.n	800081a <__aeabi_fdiv+0xda>
 8000826:	ea41 010c 	orr.w	r1, r1, ip
 800082a:	e795      	b.n	8000758 <__aeabi_fdiv+0x18>
 800082c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000830:	ea92 0f0c 	teq	r2, ip
 8000834:	d108      	bne.n	8000848 <__aeabi_fdiv+0x108>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	f47f af7d 	bne.w	8000736 <__aeabi_fmul+0x15e>
 800083c:	ea93 0f0c 	teq	r3, ip
 8000840:	f47f af70 	bne.w	8000724 <__aeabi_fmul+0x14c>
 8000844:	4608      	mov	r0, r1
 8000846:	e776      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000848:	ea93 0f0c 	teq	r3, ip
 800084c:	d104      	bne.n	8000858 <__aeabi_fdiv+0x118>
 800084e:	024b      	lsls	r3, r1, #9
 8000850:	f43f af4c 	beq.w	80006ec <__aeabi_fmul+0x114>
 8000854:	4608      	mov	r0, r1
 8000856:	e76e      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000858:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800085c:	bf18      	it	ne
 800085e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000862:	d1ca      	bne.n	80007fa <__aeabi_fdiv+0xba>
 8000864:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000868:	f47f af5c 	bne.w	8000724 <__aeabi_fmul+0x14c>
 800086c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000870:	f47f af3c 	bne.w	80006ec <__aeabi_fmul+0x114>
 8000874:	e75f      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000876:	bf00      	nop

08000878 <__gesf2>:
 8000878:	f04f 3cff 	mov.w	ip, #4294967295
 800087c:	e006      	b.n	800088c <__cmpsf2+0x4>
 800087e:	bf00      	nop

08000880 <__lesf2>:
 8000880:	f04f 0c01 	mov.w	ip, #1
 8000884:	e002      	b.n	800088c <__cmpsf2+0x4>
 8000886:	bf00      	nop

08000888 <__cmpsf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000890:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000894:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800089c:	bf18      	it	ne
 800089e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008a2:	d011      	beq.n	80008c8 <__cmpsf2+0x40>
 80008a4:	b001      	add	sp, #4
 80008a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80008aa:	bf18      	it	ne
 80008ac:	ea90 0f01 	teqne	r0, r1
 80008b0:	bf58      	it	pl
 80008b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80008b6:	bf88      	it	hi
 80008b8:	17c8      	asrhi	r0, r1, #31
 80008ba:	bf38      	it	cc
 80008bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80008c0:	bf18      	it	ne
 80008c2:	f040 0001 	orrne.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	d102      	bne.n	80008d4 <__cmpsf2+0x4c>
 80008ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80008d2:	d105      	bne.n	80008e0 <__cmpsf2+0x58>
 80008d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008d8:	d1e4      	bne.n	80008a4 <__cmpsf2+0x1c>
 80008da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008de:	d0e1      	beq.n	80008a4 <__cmpsf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cfrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4608      	mov	r0, r1
 80008ec:	4661      	mov	r1, ip
 80008ee:	e7ff      	b.n	80008f0 <__aeabi_cfcmpeq>

080008f0 <__aeabi_cfcmpeq>:
 80008f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80008f2:	f7ff ffc9 	bl	8000888 <__cmpsf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	bf48      	it	mi
 80008fa:	f110 0f00 	cmnmi.w	r0, #0
 80008fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000900 <__aeabi_fcmpeq>:
 8000900:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000904:	f7ff fff4 	bl	80008f0 <__aeabi_cfcmpeq>
 8000908:	bf0c      	ite	eq
 800090a:	2001      	moveq	r0, #1
 800090c:	2000      	movne	r0, #0
 800090e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000912:	bf00      	nop

08000914 <__aeabi_fcmplt>:
 8000914:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000918:	f7ff ffea 	bl	80008f0 <__aeabi_cfcmpeq>
 800091c:	bf34      	ite	cc
 800091e:	2001      	movcc	r0, #1
 8000920:	2000      	movcs	r0, #0
 8000922:	f85d fb08 	ldr.w	pc, [sp], #8
 8000926:	bf00      	nop

08000928 <__aeabi_fcmple>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff ffe0 	bl	80008f0 <__aeabi_cfcmpeq>
 8000930:	bf94      	ite	ls
 8000932:	2001      	movls	r0, #1
 8000934:	2000      	movhi	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_fcmpge>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffd2 	bl	80008e8 <__aeabi_cfrcmple>
 8000944:	bf94      	ite	ls
 8000946:	2001      	movls	r0, #1
 8000948:	2000      	movhi	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_fcmpgt>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffc8 	bl	80008e8 <__aeabi_cfrcmple>
 8000958:	bf34      	ite	cc
 800095a:	2001      	movcc	r0, #1
 800095c:	2000      	movcs	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_f2uiz>:
 8000964:	0042      	lsls	r2, r0, #1
 8000966:	d20e      	bcs.n	8000986 <__aeabi_f2uiz+0x22>
 8000968:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800096c:	d30b      	bcc.n	8000986 <__aeabi_f2uiz+0x22>
 800096e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000972:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000976:	d409      	bmi.n	800098c <__aeabi_f2uiz+0x28>
 8000978:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800097c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000980:	fa23 f002 	lsr.w	r0, r3, r2
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr
 800098c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000990:	d101      	bne.n	8000996 <__aeabi_f2uiz+0x32>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d102      	bne.n	800099c <__aeabi_f2uiz+0x38>
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <VL53L0X_setAddress>:
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)



void VL53L0X_setAddress(struct VL53L0X* dev, uint8_t new_addr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]
  VL53L0X_writeReg(dev, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	218a      	movs	r1, #138	; 0x8a
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fac5 	bl	8000f4c <VL53L0X_writeReg>
  dev->address = new_addr;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	709a      	strb	r2, [r3, #2]
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <VL53L0X_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X_init(struct VL53L0X* dev)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (dev->io_2v8)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00c      	beq.n	80009fa <VL53L0X_init+0x2a>
  {
    VL53L0X_writeReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01 ); // set bit 0
 80009e0:	2189      	movs	r1, #137	; 0x89
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fb30 	bl	8001048 <VL53L0X_readReg>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	2189      	movs	r1, #137	; 0x89
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 faa9 	bl	8000f4c <VL53L0X_writeReg>
  }

  // "Set I2C standard mode"
  VL53L0X_writeReg(dev, 0x88, 0x00);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2188      	movs	r1, #136	; 0x88
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 faa4 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 fa9f 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	21ff      	movs	r1, #255	; 0xff
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fa9a 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fa95 	bl	8000f4c <VL53L0X_writeReg>
  dev->stop_variable = VL53L0X_readReg(dev, 0x91);
 8000a22:	2191      	movs	r1, #145	; 0x91
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 fb0f 	bl	8001048 <VL53L0X_readReg>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	741a      	strb	r2, [r3, #16]
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fa88 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	21ff      	movs	r1, #255	; 0xff
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 fa83 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 fa7e 	bl	8000f4c <VL53L0X_writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  VL53L0X_writeReg(dev, MSRC_CONFIG_CONTROL, VL53L0X_readReg(dev,  MSRC_CONFIG_CONTROL) | 0x12);
 8000a50:	2160      	movs	r1, #96	; 0x60
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 faf8 	bl	8001048 <VL53L0X_readReg>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f043 0312 	orr.w	r3, r3, #18
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	2160      	movs	r1, #96	; 0x60
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 fa71 	bl	8000f4c <VL53L0X_writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(dev, 0.25);
 8000a6a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fb8e 	bl	8001190 <VL53L0X_setSignalRateLimit>

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fa67 	bl	8000f4c <VL53L0X_writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(dev, &spad_count, &spad_type_is_aperture)) { return false; }
 8000a7e:	f107 0213 	add.w	r2, r7, #19
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fecc 	bl	8001826 <VL53L0X_getSpadInfo>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <VL53L0X_init+0xce>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e252      	b.n	8000f44 <VL53L0X_init+0x574>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  VL53L0X_readMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000a9e:	f107 020c 	add.w	r2, r7, #12
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	21b0      	movs	r1, #176	; 0xb0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fb48 	bl	800113c <VL53L0X_readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000aac:	2201      	movs	r2, #1
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fa4b 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	214f      	movs	r1, #79	; 0x4f
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fa46 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000ac0:	222c      	movs	r2, #44	; 0x2c
 8000ac2:	214e      	movs	r1, #78	; 0x4e
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 fa41 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000aca:	2200      	movs	r2, #0
 8000acc:	21ff      	movs	r1, #255	; 0xff
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 fa3c 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000ad4:	22b4      	movs	r2, #180	; 0xb4
 8000ad6:	21b6      	movs	r1, #182	; 0xb6
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fa37 	bl	8000f4c <VL53L0X_writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000ade:	7cfb      	ldrb	r3, [r7, #19]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <VL53L0X_init+0x118>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	e000      	b.n	8000aea <VL53L0X_init+0x11a>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	75bb      	strb	r3, [r7, #22]
 8000af4:	e03c      	b.n	8000b70 <VL53L0X_init+0x1a0>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000af6:	7dba      	ldrb	r2, [r7, #22]
 8000af8:	7d7b      	ldrb	r3, [r7, #21]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d303      	bcc.n	8000b06 <VL53L0X_init+0x136>
 8000afe:	7d3b      	ldrb	r3, [r7, #20]
 8000b00:	7dfa      	ldrb	r2, [r7, #23]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d11c      	bne.n	8000b40 <VL53L0X_init+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000b06:	7dbb      	ldrb	r3, [r7, #22]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f107 0218 	add.w	r2, r7, #24
 8000b12:	4413      	add	r3, r2
 8000b14:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	7dbb      	ldrb	r3, [r7, #22]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	4603      	mov	r3, r0
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	f107 0118 	add.w	r1, r7, #24
 8000b38:	440b      	add	r3, r1
 8000b3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000b3e:	e014      	b.n	8000b6a <VL53L0X_init+0x19a>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000b40:	7dbb      	ldrb	r3, [r7, #22]
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f107 0218 	add.w	r2, r7, #24
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b50:	461a      	mov	r2, r3
 8000b52:	7dbb      	ldrb	r3, [r7, #22]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	fa42 f303 	asr.w	r3, r2, r3
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <VL53L0X_init+0x19a>
    {
      spads_enabled++;
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	3301      	adds	r3, #1
 8000b68:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000b6a:	7dbb      	ldrb	r3, [r7, #22]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	75bb      	strb	r3, [r7, #22]
 8000b70:	7dbb      	ldrb	r3, [r7, #22]
 8000b72:	2b2f      	cmp	r3, #47	; 0x2f
 8000b74:	d9bf      	bls.n	8000af6 <VL53L0X_init+0x126>
    }
  }

  VL53L0X_writeMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	21b0      	movs	r1, #176	; 0xb0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 faa8 	bl	80010d4 <VL53L0X_writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000b84:	2201      	movs	r2, #1
 8000b86:	21ff      	movs	r1, #255	; 0xff
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f9df 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f9da 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f9d5 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x09, 0x00);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2109      	movs	r1, #9
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9d0 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x10, 0x00);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f9cb 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x11, 0x00);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2111      	movs	r1, #17
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f9c6 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x24, 0x01);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2124      	movs	r1, #36	; 0x24
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f9c1 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x25, 0xFF);
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	2125      	movs	r1, #37	; 0x25
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f9bc 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x75, 0x00);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2175      	movs	r1, #117	; 0x75
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f9b7 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000bde:	2201      	movs	r2, #1
 8000be0:	21ff      	movs	r1, #255	; 0xff
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f9b2 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4E, 0x2C);
 8000be8:	222c      	movs	r2, #44	; 0x2c
 8000bea:	214e      	movs	r1, #78	; 0x4e
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f9ad 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x00);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2148      	movs	r1, #72	; 0x48
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f9a8 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x20);
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	2130      	movs	r1, #48	; 0x30
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f9a3 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000c06:	2200      	movs	r2, #0
 8000c08:	21ff      	movs	r1, #255	; 0xff
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f99e 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x09);
 8000c10:	2209      	movs	r2, #9
 8000c12:	2130      	movs	r1, #48	; 0x30
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f999 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x54, 0x00);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2154      	movs	r1, #84	; 0x54
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f994 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8000c24:	2204      	movs	r2, #4
 8000c26:	2131      	movs	r1, #49	; 0x31
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f98f 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x32, 0x03);
 8000c2e:	2203      	movs	r2, #3
 8000c30:	2132      	movs	r1, #50	; 0x32
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f98a 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x83);
 8000c38:	2283      	movs	r2, #131	; 0x83
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f985 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x25);
 8000c42:	2225      	movs	r2, #37	; 0x25
 8000c44:	2146      	movs	r1, #70	; 0x46
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f980 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x60, 0x00);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2160      	movs	r1, #96	; 0x60
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f97b 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x27, 0x00);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2127      	movs	r1, #39	; 0x27
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f976 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x50, 0x06);
 8000c60:	2206      	movs	r2, #6
 8000c62:	2150      	movs	r1, #80	; 0x50
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f971 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x51, 0x00);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2151      	movs	r1, #81	; 0x51
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f96c 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x52, 0x96);
 8000c74:	2296      	movs	r2, #150	; 0x96
 8000c76:	2152      	movs	r1, #82	; 0x52
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f967 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x56, 0x08);
 8000c7e:	2208      	movs	r2, #8
 8000c80:	2156      	movs	r1, #86	; 0x56
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f962 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x57, 0x30);
 8000c88:	2230      	movs	r2, #48	; 0x30
 8000c8a:	2157      	movs	r1, #87	; 0x57
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f95d 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x61, 0x00);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2161      	movs	r1, #97	; 0x61
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f958 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x62, 0x00);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2162      	movs	r1, #98	; 0x62
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f953 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x64, 0x00);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2164      	movs	r1, #100	; 0x64
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f94e 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x65, 0x00);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2165      	movs	r1, #101	; 0x65
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f949 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x66, 0xA0);
 8000cba:	22a0      	movs	r2, #160	; 0xa0
 8000cbc:	2166      	movs	r1, #102	; 0x66
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f944 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	21ff      	movs	r1, #255	; 0xff
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f93f 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x22, 0x32);
 8000cce:	2232      	movs	r2, #50	; 0x32
 8000cd0:	2122      	movs	r1, #34	; 0x22
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f93a 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x14);
 8000cd8:	2214      	movs	r2, #20
 8000cda:	2147      	movs	r1, #71	; 0x47
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f935 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x49, 0xFF);
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	2149      	movs	r1, #73	; 0x49
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f930 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4A, 0x00);
 8000cec:	2200      	movs	r2, #0
 8000cee:	214a      	movs	r1, #74	; 0x4a
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f92b 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21ff      	movs	r1, #255	; 0xff
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f926 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7A, 0x0A);
 8000d00:	220a      	movs	r2, #10
 8000d02:	217a      	movs	r1, #122	; 0x7a
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f921 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7B, 0x00);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	217b      	movs	r1, #123	; 0x7b
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f91c 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x78, 0x21);
 8000d14:	2221      	movs	r2, #33	; 0x21
 8000d16:	2178      	movs	r1, #120	; 0x78
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f917 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	21ff      	movs	r1, #255	; 0xff
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f912 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x23, 0x34);
 8000d28:	2234      	movs	r2, #52	; 0x34
 8000d2a:	2123      	movs	r1, #35	; 0x23
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f90d 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x42, 0x00);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2142      	movs	r1, #66	; 0x42
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f908 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0xFF);
 8000d3c:	22ff      	movs	r2, #255	; 0xff
 8000d3e:	2144      	movs	r1, #68	; 0x44
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f903 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x26);
 8000d46:	2226      	movs	r2, #38	; 0x26
 8000d48:	2145      	movs	r1, #69	; 0x45
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f8fe 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x05);
 8000d50:	2205      	movs	r2, #5
 8000d52:	2146      	movs	r1, #70	; 0x46
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f8f9 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x40);
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8f4 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0E, 0x06);
 8000d64:	2206      	movs	r2, #6
 8000d66:	210e      	movs	r1, #14
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f8ef 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x20, 0x1A);
 8000d6e:	221a      	movs	r2, #26
 8000d70:	2120      	movs	r1, #32
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f8ea 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x43, 0x40);
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	2143      	movs	r1, #67	; 0x43
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f8e5 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000d82:	2200      	movs	r2, #0
 8000d84:	21ff      	movs	r1, #255	; 0xff
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8e0 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x34, 0x03);
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2134      	movs	r1, #52	; 0x34
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f8db 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x35, 0x44);
 8000d96:	2244      	movs	r2, #68	; 0x44
 8000d98:	2135      	movs	r1, #53	; 0x35
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f8d6 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000da0:	2201      	movs	r2, #1
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f8d1 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8000daa:	2204      	movs	r2, #4
 8000dac:	2131      	movs	r1, #49	; 0x31
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f8cc 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4B, 0x09);
 8000db4:	2209      	movs	r2, #9
 8000db6:	214b      	movs	r1, #75	; 0x4b
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f8c7 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4C, 0x05);
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	214c      	movs	r1, #76	; 0x4c
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f8c2 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4D, 0x04);
 8000dc8:	2204      	movs	r2, #4
 8000dca:	214d      	movs	r1, #77	; 0x4d
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f8bd 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	21ff      	movs	r1, #255	; 0xff
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f8b8 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0x00);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2144      	movs	r1, #68	; 0x44
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f8b3 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x20);
 8000de6:	2220      	movs	r2, #32
 8000de8:	2145      	movs	r1, #69	; 0x45
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f8ae 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x08);
 8000df0:	2208      	movs	r2, #8
 8000df2:	2147      	movs	r1, #71	; 0x47
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f8a9 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x28);
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	2148      	movs	r1, #72	; 0x48
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f8a4 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x67, 0x00);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2167      	movs	r1, #103	; 0x67
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f89f 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x70, 0x04);
 8000e0e:	2204      	movs	r2, #4
 8000e10:	2170      	movs	r1, #112	; 0x70
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f89a 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x71, 0x01);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2171      	movs	r1, #113	; 0x71
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f895 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x72, 0xFE);
 8000e22:	22fe      	movs	r2, #254	; 0xfe
 8000e24:	2172      	movs	r1, #114	; 0x72
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f890 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x76, 0x00);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2176      	movs	r1, #118	; 0x76
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f88b 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x77, 0x00);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2177      	movs	r1, #119	; 0x77
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f886 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000e40:	2201      	movs	r2, #1
 8000e42:	21ff      	movs	r1, #255	; 0xff
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f881 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0D, 0x01);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	210d      	movs	r1, #13
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f87c 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000e54:	2200      	movs	r2, #0
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f877 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f872 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x01, 0xF8);
 8000e68:	22f8      	movs	r2, #248	; 0xf8
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f86d 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000e72:	2201      	movs	r2, #1
 8000e74:	21ff      	movs	r1, #255	; 0xff
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f868 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x8E, 0x01);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	218e      	movs	r1, #142	; 0x8e
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f863 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2100      	movs	r1, #0
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f85e 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000e90:	2200      	movs	r2, #0
 8000e92:	21ff      	movs	r1, #255	; 0xff
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f859 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f854 	bl	8000f4c <VL53L0X_writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	210a      	movs	r1, #10
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f84f 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(dev,  GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8000eae:	2184      	movs	r1, #132	; 0x84
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f8c9 	bl	8001048 <VL53L0X_readReg>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f023 0310 	bic.w	r3, r3, #16
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2184      	movs	r1, #132	; 0x84
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f842 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	210b      	movs	r1, #11
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f83d 	bl	8000f4c <VL53L0X_writeReg>

  // -- VL53L0X_SetGpioConfig() end

  dev->measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget(dev);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fa29 	bl	800132a <VL53L0X_getMeasurementTimingBudget>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	615a      	str	r2, [r3, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8000ede:	22e8      	movs	r2, #232	; 0xe8
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f832 	bl	8000f4c <VL53L0X_writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
 VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4619      	mov	r1, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f982 	bl	80011f8 <VL53L0X_setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f827 	bl	8000f4c <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x40)) { return false; }
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 fe73 	bl	8001bec <VL53L0X_performSingleRefCalibration>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <VL53L0X_init+0x546>
 8000f12:	2300      	movs	r3, #0
 8000f14:	e016      	b.n	8000f44 <VL53L0X_init+0x574>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 8000f16:	2202      	movs	r2, #2
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f816 	bl	8000f4c <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x00)) { return false; }
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fe62 	bl	8001bec <VL53L0X_performSingleRefCalibration>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <VL53L0X_init+0x568>
 8000f34:	2300      	movs	r3, #0
 8000f36:	e005      	b.n	8000f44 <VL53L0X_init+0x574>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8000f38:	22e8      	movs	r2, #232	; 0xe8
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f805 	bl	8000f4c <VL53L0X_writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <VL53L0X_writeReg>:

// Write an 8-bit register
void VL53L0X_writeReg(struct VL53L0X* dev, uint8_t reg, uint8_t value)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = reg;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000f60:	78bb      	ldrb	r3, [r7, #2]
 8000f62:	737b      	strb	r3, [r7, #13]
	//dev->last_status = i2c_write(dev->address, buf, 2);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 2, 1000);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <VL53L0X_writeReg+0x44>)
 8000f7c:	f002 fb00 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	701a      	strb	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000a4 	.word	0x200000a4

08000f94 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register
void VL53L0X_writeReg16Bit(struct VL53L0X* dev, uint8_t reg, uint16_t value)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	803b      	strh	r3, [r7, #0]
	uint8_t buf[3];
	buf[0] = reg;
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (value >> 8);
 8000fa8:	883b      	ldrh	r3, [r7, #0]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (value & 0xFF);
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73bb      	strb	r3, [r7, #14]
	//dev->last_status = i2c_write(dev->address, buf, 3);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 3, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <VL53L0X_writeReg16Bit+0x50>)
 8000fd0:	f002 fad6 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <VL53L0X_writeReg32Bit>:

// Write a 32-bit register
void VL53L0X_writeReg32Bit(struct VL53L0X* dev, uint8_t reg, uint32_t value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[5];
	buf[0] = reg;
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t) (value >> 24);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0e1b      	lsrs	r3, r3, #24
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	747b      	strb	r3, [r7, #17]
	buf[2] = (uint8_t) (value >> 16);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	b2db      	uxtb	r3, r3
 8001008:	74bb      	strb	r3, [r7, #18]
	buf[3] = (uint8_t) (value >> 8);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	74fb      	strb	r3, [r7, #19]
	buf[4] = (uint8_t) (value & 0xFF);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	753b      	strb	r3, [r7, #20]
	//dev->last_status = i2c_write(dev->address, buf, 5);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 5, 1000);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	f107 0210 	add.w	r2, r7, #16
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2305      	movs	r3, #5
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <VL53L0X_writeReg32Bit+0x5c>)
 8001030:	f002 faa6 	bl	8003580 <HAL_I2C_Master_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a4 	.word	0x200000a4

08001048 <VL53L0X_readReg>:

// Read an 8-bit register
uint8_t VL53L0X_readReg(struct VL53L0X* dev, uint8_t reg)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  //i2c_write(dev->address, &reg, 1);
  //dev->last_status = i2c_read(dev->address, &value, 1);
  dev->last_status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(dev->address << 1), reg, 1, &value, 1, 1000);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	789b      	ldrb	r3, [r3, #2]
 8001058:	b29b      	uxth	r3, r3
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	b29a      	uxth	r2, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 030f 	add.w	r3, r7, #15
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <VL53L0X_readReg+0x44>)
 8001076:	f002 fb81 	bl	800377c <HAL_I2C_Mem_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	701a      	strb	r2, [r3, #0]
  //HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  return value;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000a4 	.word	0x200000a4

08001090 <VL53L0X_readReg16Bit>:

// Read a 16-bit register
uint16_t VL53L0X_readReg16Bit(struct VL53L0X* dev, uint8_t reg)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  uint8_t buff[2];
  VL53L0X_readMulti(dev, reg, buff, 2);
 800109c:	f107 0208 	add.w	r2, r7, #8
 80010a0:	78f9      	ldrb	r1, [r7, #3]
 80010a2:	2302      	movs	r3, #2
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f849 	bl	800113c <VL53L0X_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 80010aa:	7a3b      	ldrb	r3, [r7, #8]
 80010ac:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 80010b4:	7a7b      	ldrb	r3, [r7, #9]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	81bb      	strh	r3, [r7, #12]
  dev->last_status = HAL_OK;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  return value;
 80010c8:	89bb      	ldrh	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <VL53L0X_writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X_writeMulti(struct VL53L0X* dev, uint8_t reg, uint8_t* src, uint8_t count)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	72bb      	strb	r3, [r7, #10]
	//i2c_write(dev->address, &reg, 1);
	//dev->last_status = i2c_write(dev->address, src, count);
	uint8_t data_index[1];
	data_index[0] = reg;
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	753b      	strb	r3, [r7, #20]
	//xSemaphoreTake(xMutexI2C, portMAX_DELAY);
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), data_index, 1, 1000);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f107 0214 	add.w	r2, r7, #20
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <VL53L0X_writeMulti+0x64>)
 8001104:	f002 fa3c 	bl	8003580 <HAL_I2C_Master_Transmit>
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), src, count, 1000);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	b29b      	uxth	r3, r3
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	b299      	uxth	r1, r3
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	b29a      	uxth	r2, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <VL53L0X_writeMulti+0x64>)
 8001122:	f002 fa2d 	bl	8003580 <HAL_I2C_Master_Transmit>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000a4 	.word	0x200000a4

0800113c <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X_readMulti(struct VL53L0X* dev, uint8_t reg, uint8_t * dst, uint8_t count)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af04      	add	r7, sp, #16
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	460b      	mov	r3, r1
 800114a:	72fb      	strb	r3, [r7, #11]
 800114c:	4613      	mov	r3, r2
 800114e:	72bb      	strb	r3, [r7, #10]
	//i2c_write(dev->address, &reg, 1);
	dev->last_status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(dev->address << 1), reg, 1, dst, count, 1000);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b299      	uxth	r1, r3
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	b298      	uxth	r0, r3
 800115e:	7abb      	ldrb	r3, [r7, #10]
 8001160:	b29b      	uxth	r3, r3
 8001162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001166:	9202      	str	r2, [sp, #8]
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	4602      	mov	r2, r0
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <VL53L0X_readMulti+0x4c>)
 8001174:	f002 fb02 	bl	800377c <HAL_I2C_Mem_Read>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	701a      	strb	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000a4 	.word	0x200000a4
 800118c:	00000000 	.word	0x00000000

08001190 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X_setSignalRateLimit(struct VL53L0X* dev, float limit_Mcps)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff fbb8 	bl	8000914 <__aeabi_fcmplt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <VL53L0X_setSignalRateLimit+0x30>
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f7ff f934 	bl	8000418 <__aeabi_f2d>
 80011b0:	a30f      	add	r3, pc, #60	; (adr r3, 80011f0 <VL53L0X_setSignalRateLimit+0x60>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa05 	bl	80005c4 <__aeabi_dcmpgt>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <VL53L0X_setSignalRateLimit+0x34>
 80011c0:	2300      	movs	r3, #0
 80011c2:	e010      	b.n	80011e6 <VL53L0X_setSignalRateLimit+0x56>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80011c4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f7ff fa05 	bl	80005d8 <__aeabi_fmul>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fbc7 	bl	8000964 <__aeabi_f2uiz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2144      	movs	r1, #68	; 0x44
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fed8 	bl	8000f94 <VL53L0X_writeReg16Bit>
  return true;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0a3d70a4 	.word	0x0a3d70a4
 80011f4:	407fffd7 	.word	0x407fffd7

080011f8 <VL53L0X_setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X_setMeasurementTimingBudget(struct VL53L0X* dev, uint32_t budget_us)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b092      	sub	sp, #72	; 0x48
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001202:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001206:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 800120a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800120e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001210:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001214:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8001216:	f240 234e 	movw	r3, #590	; 0x24e
 800121a:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 800121c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001220:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001222:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001226:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001228:	f240 2326 	movw	r3, #550	; 0x226
 800122c:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 800122e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001232:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	429a      	cmp	r2, r3
 800123a:	d201      	bcs.n	8001240 <VL53L0X_setMeasurementTimingBudget+0x48>
 800123c:	2300      	movs	r3, #0
 800123e:	e070      	b.n	8001322 <VL53L0X_setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001240:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001246:	4413      	add	r3, r2
 8001248:	647b      	str	r3, [r7, #68]	; 0x44

  VL53L0X_getSequenceStepEnables(dev, &enables);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fb88 	bl	8001966 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fbcb 	bl	80019fc <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 8001266:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <VL53L0X_setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001272:	4413      	add	r3, r2
 8001274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001276:	4413      	add	r3, r2
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 800127a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <VL53L0X_setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800128c:	4413      	add	r3, r2
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
 8001290:	e009      	b.n	80012a6 <VL53L0X_setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 8001292:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <VL53L0X_setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800129e:	4413      	add	r3, r2
 80012a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012a2:	4413      	add	r3, r2
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 80012a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <VL53L0X_setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012b2:	4413      	add	r3, r2
 80012b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012b6:	4413      	add	r3, r2
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 80012ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02e      	beq.n	8001320 <VL53L0X_setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 80012c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012c6:	4413      	add	r3, r2
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80012ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d901      	bls.n	80012d6 <VL53L0X_setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e025      	b.n	8001322 <VL53L0X_setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012e6:	f000 fc5b 	bl	8001ba0 <VL53L0X_timeoutMicrosecondsToMclks>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80012f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <VL53L0X_setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80012fe:	4413      	add	r3, r2
 8001300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(final_range_timeout_mclks));
 8001304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fbf6 	bl	8001afa <VL53L0X_encodeTimeout>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	2171      	movs	r1, #113	; 0x71
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe3d 	bl	8000f94 <VL53L0X_writeReg16Bit>

    // set_sequence_step_timeout() end

    dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	615a      	str	r2, [r3, #20]
  }
  return true;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	3748      	adds	r7, #72	; 0x48
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <VL53L0X_getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X_getMeasurementTimingBudget(struct VL53L0X* dev)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b08e      	sub	sp, #56	; 0x38
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001332:	f240 7376 	movw	r3, #1910	; 0x776
 8001336:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8001338:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800133c:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 800133e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001342:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8001344:	f240 234e 	movw	r3, #590	; 0x24e
 8001348:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 800134a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800134e:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8001350:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001354:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 8001356:	f240 2326 	movw	r3, #550	; 0x226
 800135a:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 800135c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800135e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001360:	4413      	add	r3, r2
 8001362:	637b      	str	r3, [r7, #52]	; 0x34

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fafb 	bl	8001966 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001370:	f107 0208 	add.w	r2, r7, #8
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fb3e 	bl	80019fc <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 8001380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <VL53L0X_getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800138c:	4413      	add	r3, r2
 800138e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001390:	4413      	add	r3, r2
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8001394:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <VL53L0X_getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013a0:	4413      	add	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013a6:	4413      	add	r3, r2
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
 80013aa:	e009      	b.n	80013c0 <VL53L0X_getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 80013ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <VL53L0X_getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013b8:	4413      	add	r3, r2
 80013ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013bc:	4413      	add	r3, r2
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 80013c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <VL53L0X_getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013cc:	4413      	add	r3, r2
 80013ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d0:	4413      	add	r3, r2
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 80013d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <VL53L0X_getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013e0:	4413      	add	r3, r2
 80013e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e4:	4413      	add	r3, r2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ec:	615a      	str	r2, [r3, #20]
  return budget_us;
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <VL53L0X_setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool VL53L0X_setVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type, uint8_t period_pclks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
 8001404:	4613      	mov	r3, r2
 8001406:	70bb      	strb	r3, [r7, #2]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001408:	78bb      	ldrb	r3, [r7, #2]
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 faa3 	bl	8001966 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fae6 	bl	80019fc <VL53L0X_getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d164      	bne.n	8001500 <VL53L0X_setVcselPulsePeriod+0x108>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	3b0c      	subs	r3, #12
 800143a:	2b06      	cmp	r3, #6
 800143c:	d828      	bhi.n	8001490 <VL53L0X_setVcselPulsePeriod+0x98>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <VL53L0X_setVcselPulsePeriod+0x4c>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001461 	.word	0x08001461
 8001448:	08001491 	.word	0x08001491
 800144c:	0800146d 	.word	0x0800146d
 8001450:	08001491 	.word	0x08001491
 8001454:	08001479 	.word	0x08001479
 8001458:	08001491 	.word	0x08001491
 800145c:	08001485 	.word	0x08001485
    {
      case 12:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001460:	2218      	movs	r2, #24
 8001462:	2157      	movs	r1, #87	; 0x57
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fd71 	bl	8000f4c <VL53L0X_writeReg>
        break;
 800146a:	e013      	b.n	8001494 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 14:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800146c:	2230      	movs	r2, #48	; 0x30
 800146e:	2157      	movs	r1, #87	; 0x57
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fd6b 	bl	8000f4c <VL53L0X_writeReg>
        break;
 8001476:	e00d      	b.n	8001494 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 16:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001478:	2240      	movs	r2, #64	; 0x40
 800147a:	2157      	movs	r1, #87	; 0x57
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fd65 	bl	8000f4c <VL53L0X_writeReg>
        break;
 8001482:	e007      	b.n	8001494 <VL53L0X_setVcselPulsePeriod+0x9c>

      case 18:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001484:	2250      	movs	r2, #80	; 0x50
 8001486:	2157      	movs	r1, #87	; 0x57
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fd5f 	bl	8000f4c <VL53L0X_writeReg>
        break;
 800148e:	e001      	b.n	8001494 <VL53L0X_setVcselPulsePeriod+0x9c>

      default:
        // invalid period
        return false;
 8001490:	2300      	movs	r3, #0
 8001492:	e123      	b.n	80016dc <VL53L0X_setVcselPulsePeriod+0x2e4>
    }
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001494:	2208      	movs	r2, #8
 8001496:	2156      	movs	r1, #86	; 0x56
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fd57 	bl	8000f4c <VL53L0X_writeReg>

    // apply new VCSEL period
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 800149e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014a2:	461a      	mov	r2, r3
 80014a4:	2150      	movs	r1, #80	; 0x50
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fd50 	bl	8000f4c <VL53L0X_writeReg>
    // update timeouts

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	78ba      	ldrb	r2, [r7, #2]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fb74 	bl	8001ba0 <VL53L0X_timeoutMicrosecondsToMclks>
 80014b8:	4603      	mov	r3, r0
 80014ba:	857b      	strh	r3, [r7, #42]	; 0x2a

    VL53L0X_writeReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_pre_range_timeout_mclks));
 80014bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fb1b 	bl	8001afa <VL53L0X_encodeTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	2151      	movs	r1, #81	; 0x51
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fd62 	bl	8000f94 <VL53L0X_writeReg16Bit>
    // set_sequence_step_timeout() end

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	78ba      	ldrb	r2, [r7, #2]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fb62 	bl	8001ba0 <VL53L0X_timeoutMicrosecondsToMclks>
 80014dc:	4603      	mov	r3, r0
 80014de:	853b      	strh	r3, [r7, #40]	; 0x28

    VL53L0X_writeReg(dev, MSRC_CONFIG_TIMEOUT_MACROP, (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80014e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e6:	d804      	bhi.n	80014f2 <VL53L0X_setVcselPulsePeriod+0xfa>
 80014e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	e000      	b.n	80014f4 <VL53L0X_setVcselPulsePeriod+0xfc>
 80014f2:	23ff      	movs	r3, #255	; 0xff
 80014f4:	461a      	mov	r2, r3
 80014f6:	2146      	movs	r1, #70	; 0x46
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fd27 	bl	8000f4c <VL53L0X_writeReg>
 80014fe:	e0cf      	b.n	80016a0 <VL53L0X_setVcselPulsePeriod+0x2a8>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b01      	cmp	r3, #1
 8001504:	f040 80ca 	bne.w	800169c <VL53L0X_setVcselPulsePeriod+0x2a4>
  {
    switch (period_pclks)
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	3b08      	subs	r3, #8
 800150c:	2b06      	cmp	r3, #6
 800150e:	f200 80a1 	bhi.w	8001654 <VL53L0X_setVcselPulsePeriod+0x25c>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <VL53L0X_setVcselPulsePeriod+0x120>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001535 	.word	0x08001535
 800151c:	08001655 	.word	0x08001655
 8001520:	0800157d 	.word	0x0800157d
 8001524:	08001655 	.word	0x08001655
 8001528:	080015c5 	.word	0x080015c5
 800152c:	08001655 	.word	0x08001655
 8001530:	0800160d 	.word	0x0800160d
    {
      case 8:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001534:	2210      	movs	r2, #16
 8001536:	2148      	movs	r1, #72	; 0x48
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fd07 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800153e:	2208      	movs	r2, #8
 8001540:	2147      	movs	r1, #71	; 0x47
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fd02 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001548:	2202      	movs	r2, #2
 800154a:	2132      	movs	r1, #50	; 0x32
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fcfd 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001552:	220c      	movs	r2, #12
 8001554:	2130      	movs	r1, #48	; 0x30
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fcf8 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 800155c:	2201      	movs	r2, #1
 800155e:	21ff      	movs	r1, #255	; 0xff
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fcf3 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x30);
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2130      	movs	r1, #48	; 0x30
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fcee 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001570:	2200      	movs	r2, #0
 8001572:	21ff      	movs	r1, #255	; 0xff
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fce9 	bl	8000f4c <VL53L0X_writeReg>
        break;
 800157a:	e06d      	b.n	8001658 <VL53L0X_setVcselPulsePeriod+0x260>

      case 10:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 800157c:	2228      	movs	r2, #40	; 0x28
 800157e:	2148      	movs	r1, #72	; 0x48
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fce3 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001586:	2208      	movs	r2, #8
 8001588:	2147      	movs	r1, #71	; 0x47
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fcde 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001590:	2203      	movs	r2, #3
 8001592:	2132      	movs	r1, #50	; 0x32
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fcd9 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800159a:	2209      	movs	r2, #9
 800159c:	2130      	movs	r1, #48	; 0x30
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fcd4 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 80015a4:	2201      	movs	r2, #1
 80015a6:	21ff      	movs	r1, #255	; 0xff
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fccf 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 80015ae:	2220      	movs	r2, #32
 80015b0:	2130      	movs	r1, #48	; 0x30
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fcca 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 80015b8:	2200      	movs	r2, #0
 80015ba:	21ff      	movs	r1, #255	; 0xff
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fcc5 	bl	8000f4c <VL53L0X_writeReg>
        break;
 80015c2:	e049      	b.n	8001658 <VL53L0X_setVcselPulsePeriod+0x260>

      case 12:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80015c4:	2238      	movs	r2, #56	; 0x38
 80015c6:	2148      	movs	r1, #72	; 0x48
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fcbf 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80015ce:	2208      	movs	r2, #8
 80015d0:	2147      	movs	r1, #71	; 0x47
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fcba 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80015d8:	2203      	movs	r2, #3
 80015da:	2132      	movs	r1, #50	; 0x32
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fcb5 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80015e2:	2208      	movs	r2, #8
 80015e4:	2130      	movs	r1, #48	; 0x30
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fcb0 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 80015ec:	2201      	movs	r2, #1
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fcab 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 80015f6:	2220      	movs	r2, #32
 80015f8:	2130      	movs	r1, #48	; 0x30
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fca6 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001600:	2200      	movs	r2, #0
 8001602:	21ff      	movs	r1, #255	; 0xff
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fca1 	bl	8000f4c <VL53L0X_writeReg>
        break;
 800160a:	e025      	b.n	8001658 <VL53L0X_setVcselPulsePeriod+0x260>

      case 14:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 800160c:	2248      	movs	r2, #72	; 0x48
 800160e:	2148      	movs	r1, #72	; 0x48
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fc9b 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001616:	2208      	movs	r2, #8
 8001618:	2147      	movs	r1, #71	; 0x47
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fc96 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001620:	2203      	movs	r2, #3
 8001622:	2132      	movs	r1, #50	; 0x32
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fc91 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800162a:	2207      	movs	r2, #7
 800162c:	2130      	movs	r1, #48	; 0x30
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fc8c 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001634:	2201      	movs	r2, #1
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fc87 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 800163e:	2220      	movs	r2, #32
 8001640:	2130      	movs	r1, #48	; 0x30
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fc82 	bl	8000f4c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001648:	2200      	movs	r2, #0
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fc7d 	bl	8000f4c <VL53L0X_writeReg>
        break;
 8001652:	e001      	b.n	8001658 <VL53L0X_setVcselPulsePeriod+0x260>

      default:
        // invalid period
        return false;
 8001654:	2300      	movs	r3, #0
 8001656:	e041      	b.n	80016dc <VL53L0X_setVcselPulsePeriod+0x2e4>
    }

    // apply new VCSEL period
    VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001658:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800165c:	461a      	mov	r2, r3
 800165e:	2170      	movs	r1, #112	; 0x70
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fc73 	bl	8000f4c <VL53L0X_writeReg>
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fa97 	bl	8001ba0 <VL53L0X_timeoutMicrosecondsToMclks>
 8001672:	4603      	mov	r3, r0
 8001674:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8001676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <VL53L0X_setVcselPulsePeriod+0x28e>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800167e:	89fa      	ldrh	r2, [r7, #14]
 8001680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001682:	4413      	add	r3, r2
 8001684:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_final_range_timeout_mclks));
 8001686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fa36 	bl	8001afa <VL53L0X_encodeTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	2171      	movs	r1, #113	; 0x71
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fc7d 	bl	8000f94 <VL53L0X_writeReg16Bit>
 800169a:	e001      	b.n	80016a0 <VL53L0X_setVcselPulsePeriod+0x2a8>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 800169c:	2300      	movs	r3, #0
 800169e:	e01d      	b.n	80016dc <VL53L0X_setVcselPulsePeriod+0x2e4>
  }

  // "Finally, the timing budget must be re-applied"

  VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fda6 	bl	80011f8 <VL53L0X_setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 80016ac:	2101      	movs	r1, #1
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fcca 	bl	8001048 <VL53L0X_readReg>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 80016ba:	2202      	movs	r2, #2
 80016bc:	2101      	movs	r1, #1
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fc44 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_performSingleRefCalibration(dev, 0x0);
 80016c4:	2100      	movs	r1, #0
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa90 	bl	8001bec <VL53L0X_performSingleRefCalibration>
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80016cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d0:	461a      	mov	r2, r3
 80016d2:	2101      	movs	r1, #1
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fc39 	bl	8000f4c <VL53L0X_writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <VL53L0X_getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X_getVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <VL53L0X_getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80016f6:	2150      	movs	r1, #80	; 0x50
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fca5 	bl	8001048 <VL53L0X_readReg>
 80016fe:	4603      	mov	r3, r0
 8001700:	3301      	adds	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e00d      	b.n	8001726 <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d109      	bne.n	8001724 <VL53L0X_getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001710:	2170      	movs	r1, #112	; 0x70
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fc98 	bl	8001048 <VL53L0X_readReg>
 8001718:	4603      	mov	r3, r0
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e000      	b.n	8001726 <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8001724:	23ff      	movs	r3, #255	; 0xff
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(struct VL53L0X* dev, uint32_t period_ms)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001738:	2201      	movs	r2, #1
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fc05 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001742:	2201      	movs	r2, #1
 8001744:	21ff      	movs	r1, #255	; 0xff
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fc00 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fbfb 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x91, dev->stop_variable);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7c1b      	ldrb	r3, [r3, #16]
 800175a:	461a      	mov	r2, r3
 800175c:	2191      	movs	r1, #145	; 0x91
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fbf4 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8001764:	2201      	movs	r2, #1
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fbef 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 800176e:	2200      	movs	r2, #0
 8001770:	21ff      	movs	r1, #255	; 0xff
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fbea 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fbe5 	bl	8000f4c <VL53L0X_writeReg>

  if (period_ms != 0)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d018      	beq.n	80017ba <VL53L0X_startContinuous+0x8c>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = VL53L0X_readReg16Bit(dev, OSC_CALIBRATE_VAL);
 8001788:	21f8      	movs	r1, #248	; 0xf8
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fc80 	bl	8001090 <VL53L0X_readReg16Bit>
 8001790:	4603      	mov	r3, r0
 8001792:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <VL53L0X_startContinuous+0x76>
    {
      period_ms *= osc_calibrate_val;
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	603b      	str	r3, [r7, #0]
    }

    VL53L0X_writeReg32Bit(dev, SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	2104      	movs	r1, #4
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fc1d 	bl	8000fe8 <VL53L0X_writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    VL53L0X_writeReg(dev, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80017ae:	2204      	movs	r2, #4
 80017b0:	2100      	movs	r1, #0
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fbca 	bl	8000f4c <VL53L0X_writeReg>
  else
  {
    // continuous back-to-back mode
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 80017b8:	e004      	b.n	80017c4 <VL53L0X_startContinuous+0x96>
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80017ba:	2202      	movs	r2, #2
 80017bc:	2100      	movs	r1, #0
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fbc4 	bl	8000f4c <VL53L0X_writeReg>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <VL53L0X_readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X_readRangeContinuousMillimeters(struct VL53L0X* dev)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  VL53L0X_startTimeout(dev);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fa3d 	bl	8001c54 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80017da:	e00b      	b.n	80017f4 <VL53L0X_readRangeContinuousMillimeters+0x28>
  {
    if (VL53L0X_checkTimeoutExpired(dev))
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fa49 	bl	8001c74 <VL53L0X_checkTimeoutExpired>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <VL53L0X_readRangeContinuousMillimeters+0x28>
    {
      dev->did_timeout = true;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	721a      	strb	r2, [r3, #8]
      return 65535;
 80017ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f2:	e014      	b.n	800181e <VL53L0X_readRangeContinuousMillimeters+0x52>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80017f4:	2113      	movs	r1, #19
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fc26 	bl	8001048 <VL53L0X_readReg>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ea      	beq.n	80017dc <VL53L0X_readRangeContinuousMillimeters+0x10>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = VL53L0X_readReg16Bit(dev, RESULT_RANGE_STATUS + 10);
 8001806:	211e      	movs	r1, #30
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fc41 	bl	8001090 <VL53L0X_readReg16Bit>
 800180e:	4603      	mov	r3, r0
 8001810:	81fb      	strh	r3, [r7, #14]

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001812:	2201      	movs	r2, #1
 8001814:	210b      	movs	r1, #11
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fb98 	bl	8000f4c <VL53L0X_writeReg>

  return range;
 800181c:	89fb      	ldrh	r3, [r7, #14]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X_getSpadInfo(struct VL53L0X* dev, uint8_t * count, bool * type_is_aperture)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001832:	2201      	movs	r2, #1
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff fb88 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800183c:	2201      	movs	r2, #1
 800183e:	21ff      	movs	r1, #255	; 0xff
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fb83 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fb7e 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x06);
 8001850:	2206      	movs	r2, #6
 8001852:	21ff      	movs	r1, #255	; 0xff
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fb79 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83) | 0x04);
 800185a:	2183      	movs	r1, #131	; 0x83
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fbf3 	bl	8001048 <VL53L0X_readReg>
 8001862:	4603      	mov	r3, r0
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	2183      	movs	r1, #131	; 0x83
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f7ff fb6c 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x07);
 8001874:	2207      	movs	r2, #7
 8001876:	21ff      	movs	r1, #255	; 0xff
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fb67 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x81, 0x01);
 800187e:	2201      	movs	r2, #1
 8001880:	2181      	movs	r1, #129	; 0x81
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff fb62 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fb5d 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x94, 0x6b);
 8001892:	226b      	movs	r2, #107	; 0x6b
 8001894:	2194      	movs	r1, #148	; 0x94
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff fb58 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, 0x00);
 800189c:	2200      	movs	r2, #0
 800189e:	2183      	movs	r1, #131	; 0x83
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fb53 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_startTimeout(dev);
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f9d4 	bl	8001c54 <VL53L0X_startTimeout>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 80018ac:	e007      	b.n	80018be <VL53L0X_getSpadInfo+0x98>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f9e0 	bl	8001c74 <VL53L0X_checkTimeoutExpired>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <VL53L0X_getSpadInfo+0x98>
 80018ba:	2300      	movs	r3, #0
 80018bc:	e04f      	b.n	800195e <VL53L0X_getSpadInfo+0x138>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 80018be:	2183      	movs	r1, #131	; 0x83
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fbc1 	bl	8001048 <VL53L0X_readReg>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <VL53L0X_getSpadInfo+0x88>
  }
  VL53L0X_writeReg(dev, 0x83, 0x01);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2183      	movs	r1, #131	; 0x83
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fb3b 	bl	8000f4c <VL53L0X_writeReg>
  tmp = VL53L0X_readReg(dev,  0x92);
 80018d6:	2192      	movs	r1, #146	; 0x92
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff fbb5 	bl	8001048 <VL53L0X_readReg>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2da      	uxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	701a      	strb	r2, [r3, #0]

  VL53L0X_writeReg(dev, 0x81, 0x00);
 8001906:	2200      	movs	r2, #0
 8001908:	2181      	movs	r1, #129	; 0x81
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fb1e 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x06);
 8001910:	2206      	movs	r2, #6
 8001912:	21ff      	movs	r1, #255	; 0xff
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fb19 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83)  & ~0x04);
 800191a:	2183      	movs	r1, #131	; 0x83
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fb93 	bl	8001048 <VL53L0X_readReg>
 8001922:	4603      	mov	r3, r0
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2183      	movs	r1, #131	; 0x83
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff fb0c 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001934:	2201      	movs	r2, #1
 8001936:	21ff      	movs	r1, #255	; 0xff
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff fb07 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 800193e:	2201      	movs	r2, #1
 8001940:	2100      	movs	r1, #0
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fb02 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001948:	2200      	movs	r2, #0
 800194a:	21ff      	movs	r1, #255	; 0xff
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fafd 	bl	8000f4c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff faf8 	bl	8000f4c <VL53L0X_writeReg>

  return true;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <VL53L0X_getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X_getSequenceStepEnables(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 8001970:	2101      	movs	r1, #1
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fb68 	bl	8001048 <VL53L0X_readReg>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2da      	uxtb	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	09db      	lsrs	r3, r3, #7
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	711a      	strb	r2, [r3, #4]
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables, struct VL53L0X_SequenceStepTimeouts* timeouts)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodPreRange);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fe6a 	bl	80016e4 <VL53L0X_getVcselPulsePeriod>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(dev,  MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001a18:	2146      	movs	r1, #70	; 0x46
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff fb14 	bl	8001048 <VL53L0X_readReg>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	889a      	ldrh	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f000 f889 	bl	8001b50 <VL53L0X_timeoutMclksToMicroseconds>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001a44:	2151      	movs	r1, #81	; 0x51
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fb22 	bl	8001090 <VL53L0X_readReg16Bit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f840 	bl	8001ad4 <VL53L0X_decodeTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	88da      	ldrh	r2, [r3, #6]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f000 f871 	bl	8001b50 <VL53L0X_timeoutMclksToMicroseconds>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodFinalRange);
 8001a74:	2101      	movs	r1, #1
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fe34 	bl	80016e4 <VL53L0X_getVcselPulsePeriod>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001a84:	2171      	movs	r1, #113	; 0x71
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fb02 	bl	8001090 <VL53L0X_readReg16Bit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f820 	bl	8001ad4 <VL53L0X_decodeTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <VL53L0X_getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	891a      	ldrh	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	88db      	ldrh	r3, [r3, #6]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	891a      	ldrh	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	885b      	ldrh	r3, [r3, #2]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f000 f845 	bl	8001b50 <VL53L0X_timeoutMclksToMicroseconds>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	615a      	str	r2, [r3, #20]
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <VL53L0X_decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X_decodeTimeout(uint16_t reg_val)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	0a12      	lsrs	r2, r2, #8
 8001ae6:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29b      	uxth	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <VL53L0X_encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X_encodeTimeout(uint16_t timeout_mclks)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <VL53L0X_encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001b18:	e005      	b.n	8001b26 <VL53L0X_encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001b20:	897b      	ldrh	r3, [r7, #10]
 8001b22:	3301      	adds	r3, #1
 8001b24:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f4      	bne.n	8001b1a <VL53L0X_encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001b30:	897b      	ldrh	r3, [r7, #10]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	e000      	b.n	8001b46 <VL53L0X_encodeTimeout+0x4c>
  }
  else { return 0; }
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <VL53L0X_timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	80fb      	strh	r3, [r7, #6]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001b60:	797b      	ldrb	r3, [r7, #5]
 8001b62:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <VL53L0X_timeoutMclksToMicroseconds+0x48>)
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	fb02 f203 	mul.w	r2, r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	099b      	lsrs	r3, r3, #6
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	003a2f00 	.word	0x003a2f00
 8001b9c:	10624dd3 	.word	0x10624dd3

08001ba0 <VL53L0X_timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <VL53L0X_timeoutMicrosecondsToMclks+0x44>)
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <VL53L0X_timeoutMicrosecondsToMclks+0x48>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc8:	fb02 f203 	mul.w	r2, r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	003a2f00 	.word	0x003a2f00
 8001be8:	10624dd3 	.word	0x10624dd3

08001bec <VL53L0X_performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X_performSingleRefCalibration(struct VL53L0X* dev, uint8_t vhv_init_byte)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  VL53L0X_writeReg(dev, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff f9a1 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_startTimeout(dev);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f822 	bl	8001c54 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c10:	e007      	b.n	8001c22 <VL53L0X_performSingleRefCalibration+0x36>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f82e 	bl	8001c74 <VL53L0X_checkTimeoutExpired>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <VL53L0X_performSingleRefCalibration+0x36>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e013      	b.n	8001c4a <VL53L0X_performSingleRefCalibration+0x5e>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c22:	2113      	movs	r1, #19
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fa0f 	bl	8001048 <VL53L0X_readReg>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <VL53L0X_performSingleRefCalibration+0x26>
  }

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001c34:	2201      	movs	r2, #1
 8001c36:	210b      	movs	r1, #11
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff f987 	bl	8000f4c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, SYSRANGE_START, 0x00);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff f982 	bl	8000f4c <VL53L0X_writeReg>

  return true;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <VL53L0X_startTimeout>:


void VL53L0X_startTimeout(struct VL53L0X* dev){
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	dev->timeout_start_ms = sysTick_Time;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <VL53L0X_startTimeout+0x1c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000074 	.word	0x20000074

08001c74 <VL53L0X_checkTimeoutExpired>:

bool VL53L0X_checkTimeoutExpired(struct VL53L0X* dev){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	return (dev->io_timeout > 0 && (sysTick_Time - dev->timeout_start_ms) > dev->io_timeout);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <VL53L0X_checkTimeoutExpired+0x26>
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <VL53L0X_checkTimeoutExpired+0x38>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	1ad2      	subs	r2, r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d901      	bls.n	8001c9a <VL53L0X_checkTimeoutExpired+0x26>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <VL53L0X_checkTimeoutExpired+0x28>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000074 	.word	0x20000074

08001cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb4:	f000 fbe4 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb8:	f000 f8d2 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cbc:	f000 f978 	bl	8001fb0 <MX_GPIO_Init>
  MX_CAN_Init();
 8001cc0:	f000 f914 	bl	8001eec <MX_CAN_Init>
  MX_I2C1_Init();
 8001cc4:	f000 f946 	bl	8001f54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sensor_ini();
 8001cc8:	f000 fb90 	bl	80023ec <sensor_ini>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd2:	4858      	ldr	r0, [pc, #352]	; (8001e34 <main+0x184>)
 8001cd4:	f001 fb14 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001cd8:	2014      	movs	r0, #20
 8001cda:	f000 fc33 	bl	8002544 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce4:	4853      	ldr	r0, [pc, #332]	; (8001e34 <main+0x184>)
 8001ce6:	f001 fb0b 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001cea:	2014      	movs	r0, #20
 8001cec:	f000 fc2a 	bl	8002544 <HAL_Delay>
  VL53L0X_setAddress(&myTOFsensor1,0x32);
 8001cf0:	2132      	movs	r1, #50	; 0x32
 8001cf2:	4851      	ldr	r0, [pc, #324]	; (8001e38 <main+0x188>)
 8001cf4:	f7fe fe56 	bl	80009a4 <VL53L0X_setAddress>
  HAL_Delay(20);
 8001cf8:	2014      	movs	r0, #20
 8001cfa:	f000 fc23 	bl	8002544 <HAL_Delay>
  if(VL53L0X_init(&myTOFsensor1)) {
 8001cfe:	484e      	ldr	r0, [pc, #312]	; (8001e38 <main+0x188>)
 8001d00:	f7fe fe66 	bl	80009d0 <VL53L0X_init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <main+0x62>
  	  aa = 2;
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <main+0x18c>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e002      	b.n	8001d18 <main+0x68>
  }
  else {
	  aa = 1;
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <main+0x18c>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
//	  cc = 1;
//  }
//
  #ifdef LONG_RANGE
  	// lower the return signal rate limit (default is 0.25 MCPS)
  VL53L0X_setSignalRateLimit(&myTOFsensor1, 0.1);
 8001d18:	4949      	ldr	r1, [pc, #292]	; (8001e40 <main+0x190>)
 8001d1a:	4847      	ldr	r0, [pc, #284]	; (8001e38 <main+0x188>)
 8001d1c:	f7ff fa38 	bl	8001190 <VL53L0X_setSignalRateLimit>
  	// increase laser pulse periods (defaults are 14 and 10 PCLKs)
  VL53L0X_setVcselPulsePeriod(&myTOFsensor1, VcselPeriodPreRange, 18);
 8001d20:	2212      	movs	r2, #18
 8001d22:	2100      	movs	r1, #0
 8001d24:	4844      	ldr	r0, [pc, #272]	; (8001e38 <main+0x188>)
 8001d26:	f7ff fb67 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
  VL53L0X_setVcselPulsePeriod(&myTOFsensor1, VcselPeriodFinalRange, 14);
 8001d2a:	220e      	movs	r2, #14
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4842      	ldr	r0, [pc, #264]	; (8001e38 <main+0x188>)
 8001d30:	f7ff fb62 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
  	// lower the return signal rate limit (default is 0.25 MCPS)
  VL53L0X_setSignalRateLimit(&myTOFsensor2, 0.1);
 8001d34:	4942      	ldr	r1, [pc, #264]	; (8001e40 <main+0x190>)
 8001d36:	4843      	ldr	r0, [pc, #268]	; (8001e44 <main+0x194>)
 8001d38:	f7ff fa2a 	bl	8001190 <VL53L0X_setSignalRateLimit>
  	//increase laser pulse periods (defaults are 14 and 10 PCLKs)
  VL53L0X_setVcselPulsePeriod(&myTOFsensor2, VcselPeriodPreRange, 18);
 8001d3c:	2212      	movs	r2, #18
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4840      	ldr	r0, [pc, #256]	; (8001e44 <main+0x194>)
 8001d42:	f7ff fb59 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
  VL53L0X_setVcselPulsePeriod(&myTOFsensor2, VcselPeriodFinalRange, 14);
 8001d46:	220e      	movs	r2, #14
 8001d48:	2101      	movs	r1, #1
 8001d4a:	483e      	ldr	r0, [pc, #248]	; (8001e44 <main+0x194>)
 8001d4c:	f7ff fb54 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
	// lower the return signal rate limit (default is 0.25 MCPS)
  VL53L0X_setSignalRateLimit(&myTOFsensor3, 0.1);
 8001d50:	493b      	ldr	r1, [pc, #236]	; (8001e40 <main+0x190>)
 8001d52:	483d      	ldr	r0, [pc, #244]	; (8001e48 <main+0x198>)
 8001d54:	f7ff fa1c 	bl	8001190 <VL53L0X_setSignalRateLimit>
	//increase laser pulse periods (defaults are 14 and 10 PCLKs)
  VL53L0X_setVcselPulsePeriod(&myTOFsensor3, VcselPeriodPreRange, 18);
 8001d58:	2212      	movs	r2, #18
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	483a      	ldr	r0, [pc, #232]	; (8001e48 <main+0x198>)
 8001d5e:	f7ff fb4b 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
  VL53L0X_setVcselPulsePeriod(&myTOFsensor3, VcselPeriodFinalRange, 14);
 8001d62:	220e      	movs	r2, #14
 8001d64:	2101      	movs	r1, #1
 8001d66:	4838      	ldr	r0, [pc, #224]	; (8001e48 <main+0x198>)
 8001d68:	f7ff fb46 	bl	80013f8 <VL53L0X_setVcselPulsePeriod>
  #endif
  #ifdef HIGH_SPEED
  	// reduce timing budget to 20 ms (default is about 33 ms)
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor1, 33000);
 8001d6c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001d70:	4831      	ldr	r0, [pc, #196]	; (8001e38 <main+0x188>)
 8001d72:	f7ff fa41 	bl	80011f8 <VL53L0X_setMeasurementTimingBudget>
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor2, 33000);
 8001d76:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001d7a:	4832      	ldr	r0, [pc, #200]	; (8001e44 <main+0x194>)
 8001d7c:	f7ff fa3c 	bl	80011f8 <VL53L0X_setMeasurementTimingBudget>
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor3, 33000);
 8001d80:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001d84:	4830      	ldr	r0, [pc, #192]	; (8001e48 <main+0x198>)
 8001d86:	f7ff fa37 	bl	80011f8 <VL53L0X_setMeasurementTimingBudget>
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor1, 200000);
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor2, 200000);
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor3, 200000);
  #endif

  VL53L0X_startContinuous(&myTOFsensor1, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	482a      	ldr	r0, [pc, #168]	; (8001e38 <main+0x188>)
 8001d8e:	f7ff fcce 	bl	800172e <VL53L0X_startContinuous>
  VL53L0X_startContinuous(&myTOFsensor2, 0);
 8001d92:	2100      	movs	r1, #0
 8001d94:	482b      	ldr	r0, [pc, #172]	; (8001e44 <main+0x194>)
 8001d96:	f7ff fcca 	bl	800172e <VL53L0X_startContinuous>
  VL53L0X_startContinuous(&myTOFsensor3, 0);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	482a      	ldr	r0, [pc, #168]	; (8001e48 <main+0x198>)
 8001d9e:	f7ff fcc6 	bl	800172e <VL53L0X_startContinuous>

  pHeader.DLC = 3;
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <main+0x19c>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <main+0x19c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <main+0x19c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  pHeader.StdId = 0x3D;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <main+0x19c>)
 8001db6:	223d      	movs	r2, #61	; 0x3d
 8001db8:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <main+0x1a0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0xD<<5;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <main+0x1a0>)
 8001dc2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001dc6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <main+0x1a0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <main+0x1a0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <main+0x1a0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <main+0x1a0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <main+0x1a0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <main+0x1a0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001dec:	4918      	ldr	r1, [pc, #96]	; (8001e50 <main+0x1a0>)
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <main+0x1a4>)
 8001df0:	f000 fcc5 	bl	800277e <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <main+0x1a4>)
 8001df6:	f000 fd8b 	bl	8002910 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <main+0x1a4>)
 8001dfe:	f000 fdcb 	bl	8002998 <HAL_CAN_ActivateNotification>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  measureValueToSm1 = (VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10 > 200) ? 0 : VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10;
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <main+0x188>)
 8001e04:	f7ff fce2 	bl	80017cc <VL53L0X_readRangeContinuousMillimeters>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f240 73d9 	movw	r3, #2009	; 0x7d9
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d80b      	bhi.n	8001e2c <main+0x17c>
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <main+0x188>)
 8001e16:	f7ff fcd9 	bl	80017cc <VL53L0X_readRangeContinuousMillimeters>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <main+0x1a8>)
 8001e20:	fba3 2302 	umull	r2, r3, r3, r2
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e000      	b.n	8001e2e <main+0x17e>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <main+0x1ac>)
 8001e30:	7013      	strb	r3, [r2, #0]
 8001e32:	e7e6      	b.n	8001e02 <main+0x152>
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000070 	.word	0x20000070
 8001e40:	3dcccccd 	.word	0x3dcccccd
 8001e44:	20000018 	.word	0x20000018
 8001e48:	20000030 	.word	0x20000030
 8001e4c:	20000144 	.word	0x20000144
 8001e50:	2000007c 	.word	0x2000007c
 8001e54:	200000f8 	.word	0x200000f8
 8001e58:	cccccccd 	.word	0xcccccccd
 8001e5c:	20000073 	.word	0x20000073

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b090      	sub	sp, #64	; 0x40
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	2228      	movs	r2, #40	; 0x28
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fe0a 	bl	8004a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e92:	2301      	movs	r3, #1
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e96:	2302      	movs	r3, #2
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ea0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 f9be 	bl	800422c <HAL_RCC_OscConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001eb6:	f000 f8c7 	bl	8002048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eba:	230f      	movs	r3, #15
 8001ebc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fc29 	bl	800472c <HAL_RCC_ClockConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ee0:	f000 f8b2 	bl	8002048 <Error_Handler>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3740      	adds	r7, #64	; 0x40
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_CAN_Init+0x60>)
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <MX_CAN_Init+0x64>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_CAN_Init+0x60>)
 8001ef8:	2210      	movs	r2, #16
 8001efa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_CAN_Init+0x60>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <MX_CAN_Init+0x60>)
 8001f3a:	f000 fb25 	bl	8002588 <HAL_CAN_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f000 f880 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000f8 	.word	0x200000f8
 8001f50:	40006400 	.word	0x40006400

08001f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <MX_I2C1_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_I2C1_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f92:	f001 f9cd 	bl	8003330 <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f9c:	f000 f854 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200000a4 	.word	0x200000a4
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fca:	f043 0320 	orr.w	r3, r3, #32
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a17      	ldr	r2, [pc, #92]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_GPIO_Init+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_GPIO_Init+0x90>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <MX_GPIO_Init+0x90>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_GPIO_Init+0x90>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002012:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_GPIO_Init+0x94>)
 8002014:	f001 f974 	bl	8003300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8002018:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2302      	movs	r3, #2
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4619      	mov	r1, r3
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_GPIO_Init+0x94>)
 8002032:	f001 f80b 	bl	800304c <HAL_GPIO_Init>

}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40010c00 	.word	0x40010c00

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_MspInit+0x5c>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_MspInit+0x5c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_MspInit+0x5c>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_MspInit+0x5c>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_MspInit+0x5c>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_MspInit+0x5c>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_MspInit+0x60>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_MspInit+0x60>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000

080020b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_CAN_MspInit+0x9c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d139      	bne.n	800214c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e2:	61d3      	str	r3, [r2, #28]
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_CAN_MspInit+0xa0>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800210c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <HAL_CAN_MspInit+0xa4>)
 800211e:	f000 ff95 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_CAN_MspInit+0xa4>)
 8002138:	f000 ff88 	bl	800304c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2015      	movs	r0, #21
 8002142:	f000 ff4c 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002146:	2015      	movs	r0, #21
 8002148:	f000 ff65 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40006400 	.word	0x40006400
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800

08002160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_I2C_MspInit+0x70>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d123      	bne.n	80021c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002198:	23c0      	movs	r3, #192	; 0xc0
 800219a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219c:	2312      	movs	r3, #18
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	480b      	ldr	r0, [pc, #44]	; (80021d8 <HAL_I2C_MspInit+0x78>)
 80021ac:	f000 ff4e 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 80021b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ba:	61d3      	str	r3, [r2, #28]
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_I2C_MspInit+0x74>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40005400 	.word	0x40005400
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010c00 	.word	0x40010c00

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <HardFault_Handler+0x4>

080021ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <MemManage_Handler+0x4>

080021f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <BusFault_Handler+0x4>

080021fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <UsageFault_Handler+0x4>

08002200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  sysTick_Time++;
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Handler+0x18>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	4a03      	ldr	r2, [pc, #12]	; (800223c <SysTick_Handler+0x18>)
 8002230:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002232:	f000 f96b 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000074 	.word	0x20000074

08002240 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <CAN1_RX1_IRQHandler+0x10>)
 8002246:	f000 fbcc 	bl	80029e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000f8 	.word	0x200000f8

08002254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <SystemInit+0x5c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <SystemInit+0x5c>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <SystemInit+0x5c>)
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4911      	ldr	r1, [pc, #68]	; (80022b0 <SystemInit+0x5c>)
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <SystemInit+0x60>)
 800226c:	4013      	ands	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <SystemInit+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <SystemInit+0x5c>)
 8002276:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <SystemInit+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SystemInit+0x5c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <SystemInit+0x5c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <SystemInit+0x5c>)
 8002292:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002296:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SystemInit+0x5c>)
 800229a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800229e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SystemInit+0x64>)
 80022a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40021000 	.word	0x40021000
 80022b4:	f8ff0000 	.word	0xf8ff0000
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	ledOn();
 80022c0:	f000 f854 	bl	800236c <ledOn>
	HAL_Delay(500);
 80022c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022c8:	f000 f93c 	bl	8002544 <HAL_Delay>
	ledOff();
 80022cc:	f000 f85a 	bl	8002384 <ledOff>
	HAL_Delay(500);
 80022d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022d4:	f000 f936 	bl	8002544 <HAL_Delay>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	80fb      	strh	r3, [r7, #6]
 80022e8:	4613      	mov	r3, r2
 80022ea:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80022ec:	797a      	ldrb	r2, [r7, #5]
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f806 	bl	8002304 <I2Cx_ReadData>
 80022f8:	4603      	mov	r3, r0
	return HAL_OK;
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af04      	add	r7, sp, #16
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	80fb      	strh	r3, [r7, #6]
 8002310:	4613      	mov	r3, r2
 8002312:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <I2Cx_ReadData+0x5c>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	b299      	uxth	r1, r3
 8002324:	797b      	ldrb	r3, [r7, #5]
 8002326:	b29a      	uxth	r2, r3
 8002328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2301      	movs	r3, #1
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <I2Cx_ReadData+0x5c>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	480a      	ldr	r0, [pc, #40]	; (8002364 <I2Cx_ReadData+0x60>)
 800233a:	f001 fa1f 	bl	800377c <HAL_I2C_Mem_Read>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <I2Cx_ReadData+0x4e>
	{
		a = 1;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <I2Cx_ReadData+0x64>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
	    error();
 800234e:	f7ff ffb5 	bl	80022bc <error>
	}
	return value;
 8002352:	4b03      	ldr	r3, [pc, #12]	; (8002360 <I2Cx_ReadData+0x5c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000079 	.word	0x20000079
 8002364:	200000a4 	.word	0x200000a4
 8002368:	2000015c 	.word	0x2000015c

0800236c <ledOn>:
    /* Execute user timeout callback */
    error();
    }
}

void ledOn(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	4802      	ldr	r0, [pc, #8]	; (8002380 <ledOn+0x14>)
 8002378:	f000 ffc2 	bl	8003300 <HAL_GPIO_WritePin>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40011000 	.word	0x40011000

08002384 <ledOff>:

void ledOff(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238e:	4802      	ldr	r0, [pc, #8]	; (8002398 <ledOff+0x14>)
 8002390:	f000 ffb6 	bl	8003300 <HAL_GPIO_WritePin>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40011000 	.word	0x40011000

0800239c <read_id_a>:

uint8_t read_id_a(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	//HAL_Delay(1000);
	ctrl_a = 0x00;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <read_id_a+0x24>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
	ctrl_a = sensor_io_read(0x30, 0xC0);
 80023a6:	21c0      	movs	r1, #192	; 0xc0
 80023a8:	2030      	movs	r0, #48	; 0x30
 80023aa:	f7ff ff97 	bl	80022dc <sensor_io_read>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <read_id_a+0x24>)
 80023b4:	701a      	strb	r2, [r3, #0]
	return ctrl_a;
 80023b6:	4b02      	ldr	r3, [pc, #8]	; (80023c0 <read_id_a+0x24>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000071 	.word	0x20000071

080023c4 <read_id_b>:

uint8_t read_id_b(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	ctrl_b = 0x00;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <read_id_b+0x24>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
	ctrl_b = sensor_io_read(0x51, 0xC0);
 80023ce:	21c0      	movs	r1, #192	; 0xc0
 80023d0:	2051      	movs	r0, #81	; 0x51
 80023d2:	f7ff ff83 	bl	80022dc <sensor_io_read>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <read_id_b+0x24>)
 80023dc:	701a      	strb	r2, [r3, #0]
	return ctrl_b;
 80023de:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <read_id_b+0x24>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000072 	.word	0x20000072

080023ec <sensor_ini>:


void sensor_ini(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	read_id_a();
 80023f0:	f7ff ffd4 	bl	800239c <read_id_a>
	read_id_b();
 80023f4:	f7ff ffe6 	bl	80023c4 <read_id_b>
	HAL_Delay(1000);
 80023f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fc:	f000 f8a2 	bl	8002544 <HAL_Delay>
	if (read_id_a()==0xEE) {
 8002400:	f7ff ffcc 	bl	800239c <read_id_a>
 8002404:	4603      	mov	r3, r0
 8002406:	2bee      	cmp	r3, #238	; 0xee
 8002408:	d103      	bne.n	8002412 <sensor_ini+0x26>
		a = 2;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <sensor_ini+0x40>)
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
	}
	else if (read_id_b()==0xEE) {
		b = 2;
	}
	else error();
}
 8002410:	e00a      	b.n	8002428 <sensor_ini+0x3c>
	else if (read_id_b()==0xEE) {
 8002412:	f7ff ffd7 	bl	80023c4 <read_id_b>
 8002416:	4603      	mov	r3, r0
 8002418:	2bee      	cmp	r3, #238	; 0xee
 800241a:	d103      	bne.n	8002424 <sensor_ini+0x38>
		b = 2;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <sensor_ini+0x44>)
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
}
 8002422:	e001      	b.n	8002428 <sensor_ini+0x3c>
	else error();
 8002424:	f7ff ff4a 	bl	80022bc <error>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000015c 	.word	0x2000015c
 8002430:	20000078 	.word	0x20000078

08002434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002434:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002436:	e003      	b.n	8002440 <LoopCopyDataInit>

08002438 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800243a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800243c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800243e:	3104      	adds	r1, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002444:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002448:	d3f6      	bcc.n	8002438 <CopyDataInit>
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800244c:	e002      	b.n	8002454 <LoopFillZerobss>

0800244e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002450:	f842 3b04 	str.w	r3, [r2], #4

08002454 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002456:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002458:	d3f9      	bcc.n	800244e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800245a:	f7ff fefb 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f002 faef 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002462:	f7ff fc25 	bl	8001cb0 <main>
  bx lr
 8002466:	4770      	bx	lr
  ldr r3, =_sidata
 8002468:	08004ae4 	.word	0x08004ae4
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002470:	20000054 	.word	0x20000054
  ldr r2, =_sbss
 8002474:	20000054 	.word	0x20000054
  ldr r3, = _ebss
 8002478:	20000164 	.word	0x20000164

0800247c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_2_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x28>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x28>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 fd99 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fdda 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fdb1 	bl	8003032 <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 fd79 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000048 	.word	0x20000048
 8002504:	20000050 	.word	0x20000050
 8002508:	2000004c 	.word	0x2000004c

0800250c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_IncTick+0x1c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x20>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x20>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000050 	.word	0x20000050
 800252c:	20000160 	.word	0x20000160

08002530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_GetTick+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000160 	.word	0x20000160

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff fff0 	bl	8002530 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_Delay+0x40>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffe0 	bl	8002530 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000050 	.word	0x20000050

08002588 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0ed      	b.n	8002776 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fd86 	bl	80020b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0202 	bic.w	r2, r2, #2
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7ff ffb8 	bl	8002530 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025c2:	e012      	b.n	80025ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c4:	f7ff ffb4 	bl	8002530 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b0a      	cmp	r3, #10
 80025d0:	d90b      	bls.n	80025ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2205      	movs	r2, #5
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0c5      	b.n	8002776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e5      	bne.n	80025c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002608:	f7ff ff92 	bl	8002530 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800260e:	e012      	b.n	8002636 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002610:	f7ff ff8e 	bl	8002530 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d90b      	bls.n	8002636 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2205      	movs	r2, #5
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e09f      	b.n	8002776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0e5      	beq.n	8002610 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e007      	b.n	800266e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7e5b      	ldrb	r3, [r3, #25]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e9b      	ldrb	r3, [r3, #26]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e007      	b.n	80026c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0220 	bic.w	r2, r2, #32
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7edb      	ldrb	r3, [r3, #27]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0210 	bic.w	r2, r2, #16
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0210 	orr.w	r2, r2, #16
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7f1b      	ldrb	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d108      	bne.n	8002706 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e007      	b.n	8002716 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0208 	bic.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7f5b      	ldrb	r3, [r3, #29]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d108      	bne.n	8002730 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0204 	orr.w	r2, r2, #4
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e007      	b.n	8002740 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002794:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d003      	beq.n	80027a4 <HAL_CAN_ConfigFilter+0x26>
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f040 80aa 	bne.w	80028f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2201      	movs	r2, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	401a      	ands	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d123      	bne.n	8002826 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002800:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3248      	adds	r2, #72	; 0x48
 8002806:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800281a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	3348      	adds	r3, #72	; 0x48
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d122      	bne.n	8002874 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	431a      	orrs	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800284e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3248      	adds	r2, #72	; 0x48
 8002854:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002868:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	3348      	adds	r3, #72	; 0x48
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800288e:	e007      	b.n	80028a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028ba:	e007      	b.n	80028cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	431a      	orrs	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e006      	b.n	8002906 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d12e      	bne.n	8002982 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800293c:	f7ff fdf8 	bl	8002530 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002942:	e012      	b.n	800296a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002944:	f7ff fdf4 	bl	8002530 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b0a      	cmp	r3, #10
 8002950:	d90b      	bls.n	800296a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2205      	movs	r2, #5
 8002962:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e012      	b.n	8002990 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e006      	b.n	8002990 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d002      	beq.n	80029b6 <HAL_CAN_ActivateNotification+0x1e>
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d109      	bne.n	80029ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e006      	b.n	80029d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	; 0x28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d07c      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d023      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f97d 	bl	8002d44 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a4a:	e016      	b.n	8002a7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	e00c      	b.n	8002a7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e002      	b.n	8002a7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f980 	bl	8002d7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d024      	beq.n	8002ace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f95c 	bl	8002d56 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a9e:	e016      	b.n	8002ace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	e00c      	b.n	8002ace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	e002      	b.n	8002ace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f95f 	bl	8002d8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d024      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f93b 	bl	8002d68 <HAL_CAN_TxMailbox2CompleteCallback>
 8002af2:	e016      	b.n	8002b22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	e00c      	b.n	8002b22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e002      	b.n	8002b22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f93e 	bl	8002d9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2210      	movs	r2, #16
 8002b44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f92d 	bl	8002dc2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f915 	bl	8002db0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f90d 	bl	8002de6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f8f5 	bl	8002dd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2210      	movs	r2, #16
 8002c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8f6 	bl	8002df8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2208      	movs	r2, #8
 8002c26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f8ee 	bl	8002e0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d075      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06c      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d03d      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d038      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb0:	2b30      	cmp	r3, #48	; 0x30
 8002cb2:	d017      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x302>
 8002cb4:	2b30      	cmp	r3, #48	; 0x30
 8002cb6:	d804      	bhi.n	8002cc2 <HAL_CAN_IRQHandler+0x2e0>
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d009      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x2ee>
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d00c      	beq.n	8002cda <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cc0:	e024      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002cc2:	2b50      	cmp	r3, #80	; 0x50
 8002cc4:	d018      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x316>
 8002cc6:	2b60      	cmp	r3, #96	; 0x60
 8002cc8:	d01b      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x320>
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d00f      	beq.n	8002cee <HAL_CAN_IRQHandler+0x30c>
            break;
 8002cce:	e01d      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd8:	e018      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce2:	e013      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cec:	e00e      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cf6:	e009      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d00:	e004      	b.n	8002d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2204      	movs	r2, #4
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f870 	bl	8002e1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <__NVIC_EnableIRQ+0x34>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff90 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff2d 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff42 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff90 	bl	8002f20 <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5f 	bl	8002ecc <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff35 	bl	8002e94 <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b08b      	sub	sp, #44	; 0x2c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e127      	b.n	80032b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003060:	2201      	movs	r2, #1
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8116 	bne.w	80032aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b12      	cmp	r3, #18
 8003084:	d034      	beq.n	80030f0 <HAL_GPIO_Init+0xa4>
 8003086:	2b12      	cmp	r3, #18
 8003088:	d80d      	bhi.n	80030a6 <HAL_GPIO_Init+0x5a>
 800308a:	2b02      	cmp	r3, #2
 800308c:	d02b      	beq.n	80030e6 <HAL_GPIO_Init+0x9a>
 800308e:	2b02      	cmp	r3, #2
 8003090:	d804      	bhi.n	800309c <HAL_GPIO_Init+0x50>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0xae>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d01c      	beq.n	80030d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e048      	b.n	800312e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800309c:	2b03      	cmp	r3, #3
 800309e:	d043      	beq.n	8003128 <HAL_GPIO_Init+0xdc>
 80030a0:	2b11      	cmp	r3, #17
 80030a2:	d01b      	beq.n	80030dc <HAL_GPIO_Init+0x90>
          break;
 80030a4:	e043      	b.n	800312e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030a6:	4a89      	ldr	r2, [pc, #548]	; (80032cc <HAL_GPIO_Init+0x280>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d026      	beq.n	80030fa <HAL_GPIO_Init+0xae>
 80030ac:	4a87      	ldr	r2, [pc, #540]	; (80032cc <HAL_GPIO_Init+0x280>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d806      	bhi.n	80030c0 <HAL_GPIO_Init+0x74>
 80030b2:	4a87      	ldr	r2, [pc, #540]	; (80032d0 <HAL_GPIO_Init+0x284>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d020      	beq.n	80030fa <HAL_GPIO_Init+0xae>
 80030b8:	4a86      	ldr	r2, [pc, #536]	; (80032d4 <HAL_GPIO_Init+0x288>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_GPIO_Init+0xae>
          break;
 80030be:	e036      	b.n	800312e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030c0:	4a85      	ldr	r2, [pc, #532]	; (80032d8 <HAL_GPIO_Init+0x28c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0xae>
 80030c6:	4a85      	ldr	r2, [pc, #532]	; (80032dc <HAL_GPIO_Init+0x290>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d016      	beq.n	80030fa <HAL_GPIO_Init+0xae>
 80030cc:	4a84      	ldr	r2, [pc, #528]	; (80032e0 <HAL_GPIO_Init+0x294>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0xae>
          break;
 80030d2:	e02c      	b.n	800312e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	623b      	str	r3, [r7, #32]
          break;
 80030da:	e028      	b.n	800312e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	3304      	adds	r3, #4
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e023      	b.n	800312e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	3308      	adds	r3, #8
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e01e      	b.n	800312e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	330c      	adds	r3, #12
 80030f6:	623b      	str	r3, [r7, #32]
          break;
 80030f8:	e019      	b.n	800312e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003102:	2304      	movs	r3, #4
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e012      	b.n	800312e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003110:	2308      	movs	r3, #8
 8003112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	611a      	str	r2, [r3, #16]
          break;
 800311a:	e008      	b.n	800312e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800311c:	2308      	movs	r3, #8
 800311e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	615a      	str	r2, [r3, #20]
          break;
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d801      	bhi.n	8003138 <HAL_GPIO_Init+0xec>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	e001      	b.n	800313c <HAL_GPIO_Init+0xf0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2bff      	cmp	r3, #255	; 0xff
 8003142:	d802      	bhi.n	800314a <HAL_GPIO_Init+0xfe>
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x104>
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	3b08      	subs	r3, #8
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	210f      	movs	r1, #15
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	401a      	ands	r2, r3
 8003162:	6a39      	ldr	r1, [r7, #32]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	431a      	orrs	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8096 	beq.w	80032aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800317e:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_GPIO_Init+0x298>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_GPIO_Init+0x298>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6193      	str	r3, [r2, #24]
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_GPIO_Init+0x298>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003196:	4a54      	ldr	r2, [pc, #336]	; (80032e8 <HAL_GPIO_Init+0x29c>)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4b      	ldr	r2, [pc, #300]	; (80032ec <HAL_GPIO_Init+0x2a0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x19e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <HAL_GPIO_Init+0x2a4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x19a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a49      	ldr	r2, [pc, #292]	; (80032f4 <HAL_GPIO_Init+0x2a8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x196>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a48      	ldr	r2, [pc, #288]	; (80032f8 <HAL_GPIO_Init+0x2ac>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x192>
 80031da:	2303      	movs	r3, #3
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x1a0>
 80031de:	2304      	movs	r3, #4
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x1a0>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x1a0>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x1a0>
 80031ea:	2300      	movs	r3, #0
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031fc:	493a      	ldr	r1, [pc, #232]	; (80032e8 <HAL_GPIO_Init+0x29c>)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4938      	ldr	r1, [pc, #224]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e006      	b.n	8003232 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	43db      	mvns	r3, r3
 800322c:	4933      	ldr	r1, [pc, #204]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800322e:	4013      	ands	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800323e:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	492e      	ldr	r1, [pc, #184]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
 800324a:	e006      	b.n	800325a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	43db      	mvns	r3, r3
 8003254:	4929      	ldr	r1, [pc, #164]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003256:	4013      	ands	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	4924      	ldr	r1, [pc, #144]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e006      	b.n	8003282 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	43db      	mvns	r3, r3
 800327c:	491f      	ldr	r1, [pc, #124]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800327e:	4013      	ands	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	491a      	ldr	r1, [pc, #104]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	60cb      	str	r3, [r1, #12]
 800329a:	e006      	b.n	80032aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4915      	ldr	r1, [pc, #84]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f aed0 	bne.w	8003060 <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	372c      	adds	r7, #44	; 0x2c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	10210000 	.word	0x10210000
 80032d0:	10110000 	.word	0x10110000
 80032d4:	10120000 	.word	0x10120000
 80032d8:	10310000 	.word	0x10310000
 80032dc:	10320000 	.word	0x10320000
 80032e0:	10220000 	.word	0x10220000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40010c00 	.word	0x40010c00
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
 800330c:	4613      	mov	r3, r2
 800330e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003310:	787b      	ldrb	r3, [r7, #1]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800331c:	e003      	b.n	8003326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	041a      	lsls	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e10f      	b.n	8003562 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe ff02 	bl	8002160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f001 fb32 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a7b      	ldr	r2, [pc, #492]	; (800356c <HAL_I2C_Init+0x23c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d807      	bhi.n	8003394 <HAL_I2C_Init+0x64>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <HAL_I2C_Init+0x240>)
 8003388:	4293      	cmp	r3, r2
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e006      	b.n	80033a2 <HAL_I2C_Init+0x72>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_I2C_Init+0x244>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0db      	b.n	8003562 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <HAL_I2C_Init+0x248>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a64      	ldr	r2, [pc, #400]	; (800356c <HAL_I2C_Init+0x23c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <HAL_I2C_Init+0xb4>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e009      	b.n	80033f8 <HAL_I2C_Init+0xc8>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_I2C_Init+0x24c>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800340a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4956      	ldr	r1, [pc, #344]	; (800356c <HAL_I2C_Init+0x23c>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d80d      	bhi.n	8003434 <HAL_I2C_Init+0x104>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e59      	subs	r1, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fbb1 f3f3 	udiv	r3, r1, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b04      	cmp	r3, #4
 800342e:	bf38      	it	cc
 8003430:	2304      	movcc	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1a4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x130>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x156>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x15e>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1a4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x184>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1a4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
 8003590:	4613      	mov	r3, r2
 8003592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7fe ffcc 	bl	8002530 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 80e0 	bne.w	8003768 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	4970      	ldr	r1, [pc, #448]	; (8003774 <HAL_I2C_Master_Transmit+0x1f4>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fc5e 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e0d3      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2C_Master_Transmit+0x50>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0cc      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2221      	movs	r2, #33	; 0x21
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2210      	movs	r2, #16
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a50      	ldr	r2, [pc, #320]	; (8003778 <HAL_I2C_Master_Transmit+0x1f8>)
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fad2 	bl	8003be8 <I2C_MasterRequestWrite>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e08d      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003664:	e066      	b.n	8003734 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fcd8 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b04      	cmp	r3, #4
 800367c:	d107      	bne.n	800368e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06b      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_I2C_Master_Transmit+0x188>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	6a39      	ldr	r1, [r7, #32]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fcc8 	bl	80040a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2b04      	cmp	r3, #4
 800371e:	d107      	bne.n	8003730 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e01a      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d194      	bne.n	8003666 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	00100002 	.word	0x00100002
 8003778:	ffff0000 	.word	0xffff0000

0800377c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	; 0x30
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003796:	f7fe fecb 	bl	8002530 <HAL_GetTick>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	f040 8218 	bne.w	8003bda <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2319      	movs	r3, #25
 80037b0:	2201      	movs	r2, #1
 80037b2:	4981      	ldr	r1, [pc, #516]	; (80039b8 <HAL_I2C_Mem_Read+0x23c>)
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fb5d 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
 80037c2:	e20b      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x56>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e204      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d007      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2222      	movs	r2, #34	; 0x22
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a61      	ldr	r2, [pc, #388]	; (80039bc <HAL_I2C_Mem_Read+0x240>)
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800383a:	88f8      	ldrh	r0, [r7, #6]
 800383c:	893a      	ldrh	r2, [r7, #8]
 800383e:	8979      	ldrh	r1, [r7, #10]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4603      	mov	r3, r0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fa42 	bl	8003cd4 <I2C_RequestMemoryRead>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e1c0      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d113      	bne.n	800388a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e194      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	2b01      	cmp	r3, #1
 8003890:	d11d      	bne.n	80038ce <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038ca:	b662      	cpsie	i
 80038cc:	e172      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11d      	bne.n	8003912 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038e6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800390e:	b662      	cpsie	i
 8003910:	e150      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003920:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003938:	e13c      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	2b03      	cmp	r3, #3
 8003940:	f200 80f5 	bhi.w	8003b2e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	2b01      	cmp	r3, #1
 800394a:	d123      	bne.n	8003994 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fbe7 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e13d      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003992:	e10f      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b02      	cmp	r3, #2
 800399a:	d150      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	2200      	movs	r2, #0
 80039a4:	4906      	ldr	r1, [pc, #24]	; (80039c0 <HAL_I2C_Mem_Read+0x244>)
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa64 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e112      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
 80039b6:	bf00      	nop
 80039b8:	00100002 	.word	0x00100002
 80039bc:	ffff0000 	.word	0xffff0000
 80039c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a08:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a3c:	e0ba      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	4967      	ldr	r1, [pc, #412]	; (8003be4 <HAL_I2C_Mem_Read+0x468>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fa13 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0c1      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a68:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	494f      	ldr	r1, [pc, #316]	; (8003be4 <HAL_I2C_Mem_Read+0x468>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f9e4 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e092      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003af8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b2c:	e042      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 faf6 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e04c      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d118      	bne.n	8003bb4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f aebe 	bne.w	800393a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	00010004 	.word	0x00010004

08003be8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d006      	beq.n	8003c12 <I2C_MasterRequestWrite+0x2a>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <I2C_MasterRequestWrite+0x2a>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c10:	d108      	bne.n	8003c24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e00b      	b.n	8003c3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	2b12      	cmp	r3, #18
 8003c2a:	d107      	bne.n	8003c3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f913 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e035      	b.n	8003cc4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c60:	d108      	bne.n	8003c74 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c70:	611a      	str	r2, [r3, #16]
 8003c72:	e01b      	b.n	8003cac <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c74:	897b      	ldrh	r3, [r7, #10]
 8003c76:	11db      	asrs	r3, r3, #7
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0306 	and.w	r3, r3, #6
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f063 030f 	orn	r3, r3, #15
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	490e      	ldr	r1, [pc, #56]	; (8003ccc <I2C_MasterRequestWrite+0xe4>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f945 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e010      	b.n	8003cc4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4907      	ldr	r1, [pc, #28]	; (8003cd0 <I2C_MasterRequestWrite+0xe8>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f935 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	00010008 	.word	0x00010008
 8003cd0:	00010002 	.word	0x00010002

08003cd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f8aa 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e09e      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	494c      	ldr	r1, [pc, #304]	; (8003e70 <I2C_RequestMemoryRead+0x19c>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f8ee 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e08b      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f958 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06a      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e021      	b.n	8003de8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f932 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e044      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	6a39      	ldr	r1, [r7, #32]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f917 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e029      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f81f 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	; (8003e70 <I2C_RequestMemoryRead+0x19c>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f863 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e025      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d021      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fb4f 	bl	8002530 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	e00c      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d0b6      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f30:	e051      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d123      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e046      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d021      	beq.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe facd 	bl	8002530 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10c      	bne.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e00b      	b.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d18d      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	e02d      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8ce 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e02d      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d021      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe fa73 	bl	8002530 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d1ca      	bne.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ae:	e02d      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f88d 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e02d      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d021      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fa32 	bl	8002530 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d1ca      	bne.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	e042      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d119      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0210 	mvn.w	r2, #16
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e029      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe f9dc 	bl	8002530 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d1b5      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d11b      	bne.n	8004220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e26c      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b92      	ldr	r3, [pc, #584]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00c      	beq.n	8004272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
 8004264:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d10b      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06c      	beq.n	8004358 <HAL_RCC_OscConfig+0x12c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d168      	bne.n	8004358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e246      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76>
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0xbc>
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a71      	ldr	r2, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6e      	ldr	r2, [pc, #440]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe f912 	bl	8002530 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe f90e 	bl	8002530 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1fa      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xe4>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe f8fe 	bl	8002530 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe f8fa 	bl	8002530 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1e6      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x10c>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1ba      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe f8b3 	bl	8002530 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fe f8af 	bl	8002530 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e19b      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4927      	ldr	r1, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe f892 	bl	8002530 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe f88e 	bl	8002530 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e17a      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fe f872 	bl	8002530 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fe f86e 	bl	8002530 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e15a      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 fac8 	bl	8004a04 <RCC_Delay>
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fe f858 	bl	8002530 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fe f854 	bl	8002530 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e140      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	42420000 	.word	0x42420000
 80044a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b9e      	ldr	r3, [pc, #632]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a6 	beq.w	800460a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b97      	ldr	r3, [pc, #604]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b94      	ldr	r3, [pc, #592]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a93      	ldr	r2, [pc, #588]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b8b      	ldr	r3, [pc, #556]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a8a      	ldr	r2, [pc, #552]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fe f815 	bl	8002530 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe f811 	bl	8002530 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0fd      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_OscConfig+0x4f8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004530:	4b7b      	ldr	r3, [pc, #492]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a7a      	ldr	r2, [pc, #488]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	e02d      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004546:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a75      	ldr	r2, [pc, #468]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a72      	ldr	r2, [pc, #456]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x356>
 8004568:	4b6d      	ldr	r3, [pc, #436]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a6c      	ldr	r2, [pc, #432]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a69      	ldr	r2, [pc, #420]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a66      	ldr	r2, [pc, #408]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a63      	ldr	r2, [pc, #396]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fd ffc5 	bl	8002530 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd ffc1 	bl	8002530 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0ab      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x37e>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fd ffaf 	bl	8002530 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd ffab 	bl	8002530 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e095      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4a47      	ldr	r2, [pc, #284]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8081 	beq.w	8004716 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	4b42      	ldr	r3, [pc, #264]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d061      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d146      	bne.n	80046b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fd ff7f 	bl	8002530 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd ff7b 	bl	8002530 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e067      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800465e:	4b30      	ldr	r3, [pc, #192]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	492d      	ldr	r1, [pc, #180]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a19      	ldr	r1, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	4927      	ldr	r1, [pc, #156]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fd ff4f 	bl	8002530 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fd ff4b 	bl	8002530 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e037      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
 80046b4:	e02f      	b.n	8004716 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <HAL_RCC_OscConfig+0x4fc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fd ff38 	bl	8002530 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd ff34 	bl	8002530 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e020      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x498>
 80046e2:	e018      	b.n	8004716 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e013      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x4f4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	42420060 	.word	0x42420060

0800472c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0d0      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b67      	ldr	r3, [pc, #412]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	4965      	ldr	r1, [pc, #404]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d040      	beq.n	800484c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d115      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e073      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06b      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4936      	ldr	r1, [pc, #216]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800481c:	f7fd fe88 	bl	8002530 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fd fe84 	bl	8002530 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e053      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 020c 	and.w	r2, r3, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	429a      	cmp	r2, r3
 800484a:	d1eb      	bne.n	8004824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d210      	bcs.n	800487c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 0207 	bic.w	r2, r3, #7
 8004862:	4922      	ldr	r1, [pc, #136]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4601      	mov	r1, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	5cd3      	ldrb	r3, [r2, r3]
 80048ce:	fa21 f303 	lsr.w	r3, r1, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1cc>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1d0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fde6 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40021000 	.word	0x40021000
 80048f4:	08004ac4 	.word	0x08004ac4
 80048f8:	20000048 	.word	0x20000048
 80048fc:	2000004c 	.word	0x2000004c

08004900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	b490      	push	{r4, r7}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004908:	1d3c      	adds	r4, r7, #4
 800490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800490c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004910:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 800493a:	2b08      	cmp	r3, #8
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x46>
 800493e:	e02d      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004940:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004942:	623b      	str	r3, [r7, #32]
      break;
 8004944:	e02d      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	0c9b      	lsrs	r3, r3, #18
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004952:	4413      	add	r3, r2
 8004954:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004958:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004964:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	0c5b      	lsrs	r3, r3, #17
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004972:	4413      	add	r3, r2
 8004974:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004978:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800497e:	fb02 f203 	mul.w	r2, r2, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e004      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	623b      	str	r3, [r7, #32]
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800499e:	623b      	str	r3, [r7, #32]
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6a3b      	ldr	r3, [r7, #32]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc90      	pop	{r4, r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	08004ab0 	.word	0x08004ab0
 80049b4:	08004ac0 	.word	0x08004ac0
 80049b8:	40021000 	.word	0x40021000
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	003d0900 	.word	0x003d0900
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	20000048 	.word	0x20000048

080049dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e0:	f7ff fff2 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e4:	4601      	mov	r1, r0
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f2:	5cd3      	ldrb	r3, [r2, r3]
 80049f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	08004ad4 	.word	0x08004ad4

08004a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <RCC_Delay+0x34>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <RCC_Delay+0x38>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0a5b      	lsrs	r3, r3, #9
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a20:	bf00      	nop
  }
  while (Delay --);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1e5a      	subs	r2, r3, #1
 8004a26:	60fa      	str	r2, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f9      	bne.n	8004a20 <RCC_Delay+0x1c>
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000048 	.word	0x20000048
 8004a3c:	10624dd3 	.word	0x10624dd3

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	2500      	movs	r5, #0
 8004a44:	4e0c      	ldr	r6, [pc, #48]	; (8004a78 <__libc_init_array+0x38>)
 8004a46:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a48:	1ba4      	subs	r4, r4, r6
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	f000 f822 	bl	8004a98 <_init>
 8004a54:	2500      	movs	r5, #0
 8004a56:	4e0a      	ldr	r6, [pc, #40]	; (8004a80 <__libc_init_array+0x40>)
 8004a58:	4c0a      	ldr	r4, [pc, #40]	; (8004a84 <__libc_init_array+0x44>)
 8004a5a:	1ba4      	subs	r4, r4, r6
 8004a5c:	10a4      	asrs	r4, r4, #2
 8004a5e:	42a5      	cmp	r5, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a68:	4798      	blx	r3
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a72:	4798      	blx	r3
 8004a74:	3501      	adds	r5, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08004adc 	.word	0x08004adc
 8004a7c:	08004adc 	.word	0x08004adc
 8004a80:	08004adc 	.word	0x08004adc
 8004a84:	08004ae0 	.word	0x08004ae0

08004a88 <memset>:
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4402      	add	r2, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
